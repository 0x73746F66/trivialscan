---
defaults:
  use_sni: True
  cafiles:
  tmp_path_prefix: /tmp
  http_path: /

outputs:
  - type: console

evaluations:
  - key: client_renegotiation
    group: tls_negotiation
    label_as: Client initiated TLS renegotiation
    issue: >
      Server accepts client-initiated insecure renegotiation, numerous exploits exists and many have been assigned CVE
    cvss2: AV:N/AC:M/Au:N/C:N/I:N/A:C
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H
    cve:
      - CVE-2009-3555
      - CVE-2011-1473
      - CVE-2011-5094
      - CVE-2021-3449
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 5746 - Transport Layer Security Renegotiation Indication Extension
        url: https://datatracker.ietf.org/doc/html/rfc5746
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Detected
        score: 60
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -120

  - key: secure_renegotiation
    group: tls_negotiation
    label_as: Secure Renegotiation
    issue: Client initiated TLS renegotiation allows attackers to leverage known exploits for lower protocols, prevention is possible when implementing Secure Renegotiation described in RFC-5746 section 3.3 implemented using the renegotiation_info extension or the spurious cipher TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    cvss2: AV:N/AC:M/Au:N/C:N/I:N/A:C
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H
    cve:
      - CVE-2009-3555
      - CVE-2011-1473
      - CVE-2011-5094
      - CVE-2021-3449
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 5746 - Transport Layer Security Renegotiation Indication Extension
        url: https://datatracker.ietf.org/doc/html/rfc5746
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -120
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 100

  - key: crime_vuln
    group: transport
    label_as: CRIME/BEAST Vulnerability
    issue: >
      Server supports TLS compression which may allow CRIME/BEAST attacks
    cvss2: AV:N/AC:H/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N
    cve:
      - CVE-2012-4929
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 3749 - Transport Layer Security Protocol Compression Methods
        url: https://datatracker.ietf.org/doc/html/rfc3749
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Detected
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Vulnerable
        score: -180

  - key: caa_present
    group: certificate
    label_as: Certification Authority Authorization (CAA) Present
    issue: >
      The lack of any CAA records authorizes normal unrestricted issuance.
      It is recommended that you create CAA records for your approved CAs to minimize business impact. With CAA, you can minimize the risk of certificate issuance by unauthorized CAs and help create a more secure and transparent online ecosystem.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: RFC 8659 - DNS Certification Authority Authorization (CAA) Resource Record
        url: https://datatracker.ietf.org/doc/html/rfc8659
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Detected
        score: 40

  - key: caa_valid
    group: certificate
    label_as: Certification Authority Authorization (CAA) Valid
    issue: >
      Certificate authorities implementing CAA perform a DNS lookup for CAA resource records, and if any are found, ensure that they are listed as an authorized party before issuing a digital certificate.
      Third parties monitoring certificate authority behavior might check newly issued certificates against the domain's CAA records. RFC 8659 states; CAA records MAY be used by Certificate Evaluators as a possible indicator of a security policy violation. Such use SHOULD take into account the possibility that published CAA records changed between the time a certificate was issued and the time at which the certificate was observed by the Certificate Evaluator.
      The CAA records can help with the enforcement of your corporate policies on approved CAs. By aligning the CAA records with the list of corporate approved CAs, the risk of non-compliance to the policy is minimized.
      If CAA records exist but do not include an approved or preferred CA for a specific domain, the issuance of certificates by that CA to the domain cannot proceed until the creation of the appropriate CAA record is completed.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: RFC 8659 - DNS Certification Authority Authorization (CAA) Resource Record
        url: https://datatracker.ietf.org/doc/html/rfc8659
      - name: Ignoring CAA based on another CA's Certificate Transparency disclosure
        url: https://wiki.mozilla.org/CA/Camerfirma_Issues#Issue_F:_Ignoring_CAA_based_on_another_CA.27s_Certificate_Transparency_disclosure_.28Nov._2017.29
      - name: Let's Encrypt? Let's revoke 3 million HTTPS certificates
        url: https://www.theregister.com/2020/03/03/lets_encrypt_cert_revocation/
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -200
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120

  - key: tlsa
    group: certificate
    label_as: TLS/A
    issue: >
      DNS by itself is not secure, without TLS/a or DNSSEC ICANN states any attacker can easily redirect a user to any malicious actor controlled server without the user or authentic server realising it
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: ICANN
        url: https://www.icann.org/resources/pages/dnssec-what-is-it-why-important-2019-03-05-en
      - name: RFC 6840 - Clarifications and Implementation Notes for DNS Security
        url: https://datatracker.ietf.org/doc/html/rfc6840
      - name: RFC 4033 - DNS Security Introduction and Requirements
        url: https://datatracker.ietf.org/doc/html/rfc4033
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -200
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Detected
        score: 120

  - key: dnssec_present
    group: certificate
    label_as: DNSSEC Present
    issue: >
      DNS by itself is not secure, without DNSSEC ICANN states any attacker can easily redirect a user to any malicious actor controlled server without the user or authentic server realising it
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: ICANN
        url: https://www.icann.org/resources/pages/dnssec-what-is-it-why-important-2019-03-05-en
      - name: RFC 6014 - Cryptographic Algorithm Identifier Allocation for DNSSEC
        url: https://datatracker.ietf.org/doc/html/rfc6014
      - name: RFC 6840 - Clarifications and Implementation Notes for DNS Security
        url: https://datatracker.ietf.org/doc/html/rfc6840
      - name: RFC 4956 - DNS Security (DNSSEC) Opt-In
        url: https://datatracker.ietf.org/doc/html/rfc4956
      - name: RFC 4033 - DNS Security Introduction and Requirements
        url: https://datatracker.ietf.org/doc/html/rfc4033
    anotate_results:
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -100
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Detected
        score: 60

  - key: dnssec_valid
    group: certificate
    label_as: DNSSEC Valid
    issue: >
      DNS by itself is not secure, without DNSSEC ICANN states any attacker can easily redirect a user to any malicious actor controlled server without the user or authentic server realising it
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: ICANN
        url: https://www.icann.org/resources/pages/dnssec-what-is-it-why-important-2019-03-05-en
      - name: RFC 6014 - Cryptographic Algorithm Identifier Allocation for DNSSEC
        url: https://datatracker.ietf.org/doc/html/rfc6014
      - name: RFC 6840 - Clarifications and Implementation Notes for DNS Security
        url: https://datatracker.ietf.org/doc/html/rfc6840
      - name: RFC 4956 - DNS Security (DNSSEC) Opt-In
        url: https://datatracker.ietf.org/doc/html/rfc4956
      - name: RFC 4033 - DNS Security Introduction and Requirements
        url: https://datatracker.ietf.org/doc/html/rfc4033
    anotate_results:
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120

  - key: deprecated_dnssec_algorithm
    group: certificate
    label_as: Avoid deprecated DNSSEC algorithm
    issue: >
      Whenever a DNS zone is signed with a SHA-1 DNSKEY algorithm it is vulnerable to chosen prefix collision attacks. This is a problem when a zone accepts updates from multiple parties, such as; TLDs, enterprises, hosting providers. It is also a problem when a key is re-used by multiple zones
    cvss2: AV:N/AC:L/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
    cve:
      - CVE-2019-14855
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.8
            - 6.5.10
            - 8.6
        - version: 4.0
          requirements:
            - 6.2.1
            - 6.2.4
    references:
      - name: Cambridge University Information Services
        url: https://www.dns.cam.ac.uk/news/2020-01-09-sha-mbles.html
      - name: Disclosure Paper
        url: https://sha-mbles.github.io/
    anotate_results:
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -100
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80

  - key: transparency_present
    group: certificate
    label_as: Certificate Transparency present
    issue: >
      CT brings transparency to the SSL/TLS certificate system that supports the web. SSL/TLS protocols underpin HTTPS and Web PKI. A lack of transparency weakens the reliability and effectiveness of encrypted connections, which can compromise critical TLS/SSL mechanisms. As a result, they can enable a wide range of security attacks, such as website spoofing, server impersonation, and man-in-the-middle attacks.
      Web PKI depends on CAs acting as trustworthy gatekeepers by issuing certificates only to the right parties and by avoiding giving additional permissions accidentally to those parties. An important part of how CAs meet these obligations is to design their systems so they are resilient to failure.
    references:
      - name: Certificate Transparency step by step
        url: https://certificate.transparency.dev/howctworks/
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Detected
        score: 60

  - key: transparency_trustworthy
    group: certificate
    label_as: Trustworthy Certificate Transparency
    issue: >
      Certificate Transparency (CT) is a mechanism which helps domain owners and industry watch dogs detect misissuance.
      Misissuance occurs when a Certificate Authority (CA) issues an SSL certificate improperly. This may mean that the CA included incorrect information in the certificate, issued the certificate to someone who did not represent the organization or domain, or was even compromised.
      Some browsers require certificates to have proof of being logged with certificate transparency, Safari requires up to 3 SCTs and Chrome requires between 3 and 5. The policies are far more complex than this so the generalised best practice is using at least 3 distinct SCTs per certificate.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: Chrome Google Group - Certificate Transparency Policy
        url: https://groups.google.com/a/chromium.org/g/ct-policy/c/fCt4Bm03GsI
      - name: Apple - Certificate Transparency policy
        url: https://support.apple.com/en-ca/HT205280
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -200
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120

  - key: private_key_known_compromised
    group: certificate
    label_as: Known Compromised Private Key
    issue: >
      DSA keys, and RSA keys smaller than 1024 bits offer no security and should not be used at all, whether they are known to be compromised or not. The pwnedkeys database keeps records of compromised 1024 bit and larger RSA/DSA keys, as well as elliptic-curve keys on the P-256, P-384, and P-521 curves. If your private key is ever compromised, it should be considered an emergency, and your priority should be resolving the issue immediately. If an unauthorized person gains access to your private key, they can assume the identity that your certificate is intended to protect (e.g. you, your company, and/or your website)
    cvss2: AV:L/AC:H/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N
    cve:
      - CVE-2007-3108
      - CVE-2008-0166
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: Security Advisory
        url: https://www.debian.org/security/2008/dsa-1571
      - name: OSINT
        url: https://pwnedkeys.com/faq.html
    anotate_results:
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Compromised
        score: -500
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Known Compromised
        score: 100
      - value: None
        evaluation_value: "[bold][cyan]SKIP![/cyan][/bold]"
        display_as: Not an valid pwnedkeys.com response
        score: 0

  - key: deprecated_protocol_negotiated
    group: tls_negotiation
    label_as: Deprecated TLS protocol negotiated
    issue: >
      When information is sent between the client and the server, it must be encrypted and protected in order to prevent an attacker from being able to read or modify it
      This is most commonly done using HTTPS, which uses the Transport Layer Security (TLS) protocol, a replacement for the deprecated Secure Socket Layer (SSL) protocol
      By default, most servers still support outdated and known vulnerable protocols, typically for backwards compatibility with equally outdated web browser software
      This is known as an insecure default and could lead to trivial attacks against default or misconfigured servers
    cvss2: AV:N/AC:H/Au:N/C:C/I:C/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    cve:
      - CVE-2014-8730
      - CVE-2014-0160
      - CVE-2009-3555
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: Testing for Weak SSL TLS Ciphers Insufficient Transport Layer Protection (WSTG-CRYP-01)
        url: https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: known_weak_cipher_negotiated
    group: tls_negotiation
    label_as: Known weak ciphers negotiated {negotiated_cipher} ({negotiated_cipher_bits} bits)
    issue: >
      A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms
      They are used during the negotiation of security settings for a TLS/SSL connection as well as for the transfer of data
      By default, most servers still support outdated and known vulnerable ciphers
      This is known as an insecure default and could lead to trivial attacks against default or misconfigured servers
    cvss2: AV:N/AC:H/Au:N/C:C/I:C/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    cve:
      - CVE-2014-6321
      - CVE-2008-0166
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: Testing for Weak SSL TLS Ciphers Insufficient Transport Layer Protection (WSTG-CRYP-01)
        url: https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200
    substitutions:
      - negotiated_cipher
      - negotiated_cipher_bits

  - key: known_weak_cipher_offered
    group: tls_negotiation
    label_as: Known weak ciphers offered
    issue: >
      A cipher suite is a combination of authentication, encryption, and message authentication code (MAC) algorithms
      They are used during the negotiation of security settings for a TLS/SSL connection as well as for the transfer of data
      By default, most servers still support outdated and known vulnerable ciphers
      This could lead to trivial attacks against default or misconfigured servers
    cvss2: AV:N/AC:H/Au:N/C:C/I:C/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
    cve:
      - CVE-2014-6321
      - CVE-2008-0166
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: Testing for Weak SSL TLS Ciphers Insufficient Transport Layer Protection (WSTG-CRYP-01)
        url: https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: rc4_cipher_offered
    group: tls_negotiation
    label_as: Known exploited and deprecated RC4 ciphers offered
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: cbc_cipher_offered
    group: tls_negotiation
    label_as: Known exploited and deprecated CBC ciphers offered
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: strong_cipher_negotiated
    group: tls_negotiation
    label_as: Strong ciphers negotiated
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -200

  - key: strong_cipher_offered
    group: tls_negotiation
    label_as: Strong ciphers offered
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -500

  - key: only_strong_ciphers_offered
    group: tls_negotiation
    label_as: Only strong ciphers offered
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 400
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -200

  - key: known_weak_signature_algorithm
    group: certificate
    label_as: Deprecated or known weak signature algorithm
    issue: >
      Using the SHA-1 chosen-prefix collision the X.509 Certificate can be forged, other attacks leverage predictable serial numbers and compromise Certificate Authorities issued Certificates
    cvss2: AV:N/AC:L/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
    cve:
      - CVE-2005-4900
      - CVE-2019-14855
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: Disclosure Paper
        url: https://shattered.io/
      - name: CA/Browser Forum
        url: https://cabforum.org/2014/10/16/ballot-118-sha-1-sunset/
      - name: Cambridge University Information Services
        url: https://www.dns.cam.ac.uk/news/2020-01-09-sha-mbles.html
      - name: Disclosure Paper
        url: https://sha-mbles.github.io/
    anotate_results:
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80

  - key: fallback_scsv
    group: tls_negotiation
    label_as: Downgrade attack prevention (SCSV)
    issue: The TLS Signaling Cipher Suite Value (SCSV) protects against TLS/SSL downgrade attacks. If enabled, the server makes sure that the strongest protocol that both client and server understand is used. Attackers can make a client attempt weaker TLS connections and exploit all the vulnerabilities associated with a given protocol
    cvss2: AV:N/AC:M/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N
    cve:
      - CVE-2014-3566
      - CVE-2014-8730
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 7507 - TLS Fallback Signaling Cipher Suite Value (SCSV) for Preventing Protocol Downgrade Attacks
        url: https://datatracker.ietf.org/doc/html/rfc7507
    anotate_results:
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -180
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120

  - key: valid_certificate_chain
    group: tls_negotiation
    label_as: Valid Certificate Chain
    issue: >
      The chain terminates with a Root CA Certificate. The Root CA Certificate is always signed by the CA itself. The signatures of all certificates in the chain must be verified up to the Root CA Certificate.
      Each certificate in the chain is checked to ensure it is not expired and the chain path is complete.
      When the root certificates are available in trust-store, this script will use its public key to verify the root certificate, once it verifies it will verify trust the intermediate certificate and eventually the server (leaf) certificate to complete the chain.
      Only one valid chain from trusted root to the leaf certificate is needed to be compatible with web browsers, however the entire certificate chain should be valid to be considered trustworthy as any compromised certificate in any chain would allow malicious attackers to sign a leaf certificate which would be considered valid in the parallel chain.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: tls_robot
    group: tls_negotiation
    label_as: ROBOT Vulnerability
    issue: Timing attack causing padding errors using RSA with PKCS#1 v1.5 session keys allowing any attacker to passively record traffic and later decrypt it
    cvss2: AV:N/AC:H/Au:N/C:C/I:N/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H/E:P/RL:W/RC:C
    cve:
      - CVE-2012-5081
      - CVE-2016-6883
      - CVE-2017-6168
      - CVE-2017-17382
      - CVE-2017-17427
      - CVE-2017-17428
      - CVE-2017-12373
      - CVE-2017-13098
      - CVE-2017-1000385
      - CVE-2017-13099
      - CVE-2017-17841
      - CVE-2018-1388
      - CVE-2018-5762
      - CVE-2017-18268
      - CVE-2017-15533
      - CVE-2018-9192
      - CVE-2018-9194
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: CERT/CC
        url: https://www.kb.cert.org/vuls/id/144389
      - name: Proof of Concept
        url: https://github.com/robotattackorg/robot-detect
      - name: Disclosure Paper
        url: https://www.robotattack.org/
      - name: Disclosure Paper
        url: http://archiv.infsec.ethz.ch/education/fs08/secsem/bleichenbacher98.pdf
      - name: Disclosure Paper
        url: https://eprint.iacr.org/2003/052
      - name: Disclosure Paper
        url: https://www.nds.rub.de/media/nds/veroeffentlichungen/2015/08/21/Tls13QuicAttacks.pdf
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -180
      - value: None
        evaluation_value: "[bold][cyan]INFO![/cyan][/bold]"
        display_as: Incomplete evaluation (check log with -vvv)
        score: 0

  - key: revocation_crlite
    group: certificate
    label_as: Intermediate Certificate Revocation (crlite)
    issue: Certificate Revocation only occurs if the Certificate is no longer intended to be used for it's designed purpose, and offers no security at best, or represents a known compormise
    cvss2: AV:L/AC:H/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N
    cve:
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: Security Advisory
        url: https://blog.mozilla.org/security/tag/crlite/
    anotate_results:
      - value: Revoked
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Revoked
        score: -200
      - value: Expired
        evaluation_value: "[khaki1]WARN! Expired[/khaki1]"
        display_as: Expired
        score: 0
      - value: Good
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Revoked
        score: 80
      - value: NotCovered
        evaluation_value: "[khaki1]WARN! NotCovered[/khaki1]"
        display_as: NotCovered
        score: -100
      - value: NotEnrolled
        evaluation_value: "[khaki1]WARN! NotEnrolled[/khaki1]"
        display_as: NotEnrolled
        score: -100

  - key: possible_phish_or_malicious
    group: certificate
    label_as: Malicious Certificate
    issue: >
      Malicious certificates are most commonly signed by trusted certificate authority roots, to evade detection
      by blending in with legitimate traffic and making use of encryption to help hide their payloads.
      Both commodity and targeted attack malware make heavy use of encrypted command-and-control (C&C) that is
      indistinguishable from regular traffic, and ethical actors (with permission granted) will leverage tools
      called intrusion frameworks like; Cobalt Strike, Metasploit, and Core Impact that should be identified
      as though these were unauthorised because bad actors will attempt to emulate a penetration tester in
      order to take advantage of a trust relationship and infect you regardless.
      Phishing websites will use these malicious certificates that are identical to legitimate certificates which
      gives a false sense of security to victims who observe the strong encryption being used in their browser
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 5.2
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 3.7.5
            - 5.2.2
            - 6.4.1
            - 6.4.2
            - A2.1
    references:
      - name: Analyzing SSL/TLS Certificates Used by Malware (Trend Micro)
        url: https://webcache.googleusercontent.com/search?q=cache:lXyCnKFb3acJ:https://www.trendmicro.com/en_us/research/21/i/analyzing-ssl-tls-certificates-used-by-malware.html+&cd=1&hl=en&ct=clnk&gl=au
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Known Compromised
        score: 40
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral] {reason}"
        display_as: Compromised
        score: -200
    substitutions:
      - sha1_fingerprint

  - key: known_weak_keys
    group: certificate
    label_as: Known Weak key usage {public_key_type}-{public_key_size}
    issue: >
      Continued use of weak keys in certificates puts your sensitive data at risk. Exhaustive key searches or brute force attacks against certificates with weak keys are dangerous to network security.
      As computational power increases, so does the need for stronger keys.
      If this is not the leaf certificate it is a root or intermediate which signs other digital certificates with its private key, if the private key is weak it may be compromised and all the rest of the issued certificates become useless.
      Diffie-Hellman key exchange depends for its security on the presumed difficulty of solving the discrete logarithm problem.
      By design, many Diffie-Hellman implementations use the same pre-generated prime for their field, because of the reuse of primes generating precomputation for just one prime would expose millions of implementations. This vulnerability was known as early as 1992.
      Claims on the practical implications of the attack at the time were however disputed by security researchers but over the years it is expected that many primes were and still are being calculated practically making all primes of 2048 bit or less considered weak or vulnerable.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: RFC 8270 - Increase the Secure Shell Minimum Recommended Diffie-Hellman Modulus Size to 2048 Bits
        url: https://datatracker.ietf.org/doc/html/rfc8270
      - name: Eyal Ronen and Adi Shamir - Critical Review of Imperfect Forward Secrecy
        url: http://www.wisdom.weizmann.ac.il/~eyalro/RonenShamirDhReview.pdf
      - name: Logjam Attack - Imperfect Forward Secrecy, How Diffie-Hellman Fails in Practice
        url: https://weakdh.org/imperfect-forward-secrecy-ccs15.pdf
      - name: TLS/SSL certificate weak key vulnerability - DigiCert
        url: https://docs.digicert.com/certificate-tools/discovery-user-guide/tlsssl-certificate-vulnerabilities/weak-keys/
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 200
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Vulnerable
        score: -500
    substitutions:
      - public_key_type
      - public_key_size

  - key: weak_rsa_public_exponent
    group: certificate
    label_as: Known Weak RSA public key exponent {public_key_exponent}
    issue: >
      Using anything other than 65537 as the public exponent would effect compatibility with most hardware and software.
      Lower isn't vulnerable with proper padding however RSA implementations are widely flawed and did not consider this security characteristic therefore in practice any low exponent could indicate weakness known to be exploited by many heavily scrutinised researchers publications.
      Using exatly 65537 is an industry standard prescribed by certification authorities and compliance such as PCI DSS, Annex B.3 of FIP186-4, NIST Special Publication on Computer Security (SP 800-78 Rev. 1 of August 2007) does not allow public exponents e smaller than 65537.
    references:
      - name: Twenty Years of Attacks on the RSA Cryptosystem - Dan Boneh, Stanford University
        url: https://www.researchgate.net/publication/2538368_Twenty_Years_of_Attacks_on_the_RSA_Cryptosystem
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 2.2.7
            - 3.3.2
            - 3.3.3
            - 3.5.1
            - 3.6.1
            - 4.2.1
            - 4.2.2
            - 6.2.4
            - 8.3.2
            - A2
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Vulnerable
        score: -200
    substitutions:
      - public_key_exponent

  - key: rsa_public_key_issue
    group: certificate
    label_as: RSA public key exponent {public_key_exponent} has known issues
    issue: >
      Using anything other than 65537 as the public exponent would effect compatibility with most hardware and software.
      Any higher exponent would make the public RSA operation, used for encryption or signature verification, unusably slower.
      Using a larger exponent will not decrease security, but will be more time / power consuming.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 4.1
        - version: 4.0
          requirements:
            - 1.2.6
            - 2.2.4
            - 2.2.5
            - 4.2.1
            - 6.2.4
            - 12.3.3
    references:
      - name: Twenty Years of Attacks on the RSA Cryptosystem - Dan Boneh, Stanford University
        url: https://www.researchgate.net/publication/2538368_Twenty_Years_of_Attacks_on_the_RSA_Cryptosystem
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 20
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Problematic
        score: -500
    substitutions:
      - public_key_exponent

  - key: valid_common_name
    group: certificate
    label_as: Valid Certificate Common Name
    issue: >
      This is frequently a misconfiguration, i.e. the website domain name was not included in your common name by mistake.
      However it is a very uncommon issue and is most likely indication of compromise, where a malicious attacker is targeting website owners or visitors using phishing or impersonation and have made the error unintentionally or was unable to effectively impersonate the website correctly and are relying on visitors ignoring browser warnings.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 9110 - HTTP Semantics
        url: https://datatracker.ietf.org/doc/html/rfc9110
      - name: DNSimple - What is the Certificate Common Name
        url: https://support.dnsimple.com/articles/what-is-common-name/
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 20
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: valid_host_name
    group: certificate
    label_as: Hostname matches Certificate
    issue: >
      This is frequently a misconfiguration, i.e. the website domain name was not included in your common name by mistake.
      However it is a very uncommon issue and is most likely indication of compromise, where a malicious attacker is targeting website owners or visitors using phishing or impersonation and have made the error unintentionally or was unable to effectively impersonate the website correctly and are relying on visitors ignoring browser warnings.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 9110 - HTTP Semantics
        url: https://datatracker.ietf.org/doc/html/rfc9110
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 50
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -150

  - key: h2c
    group: transport
    label_as: HTTP/2 cleartext
    issue: >
      This will lead to a communication channel establised over an insecure network connection
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)
        url: https://datatracker.ietf.org/doc/html/rfc7540
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 50
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: certification_version
    group: certificate
    label_as: X.509 Certificates are in version 3
    issue: >
      HIPAA, Security Rule (Ref. NIST SP 800-52: Guidelines for the Selection and Use of TLS Implementations)
      Require all the X509 certificates provided by the server are in version 3.
    references:
      - name: NIST SP 800-52 - Guidelines for the Selection and Use of TLS Implementations
        url: https://www.hhs.gov/hipaa/for-professionals/security/guidance/index.html
      - name: HIPAA / HITECH
        url: https://www.hhs.gov/hipaa/index.html
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Compliant
        score: 20
      - value: False
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Non-compliant
        score: -50

  - key: certification_expired
    group: certificate
    label_as: Certificate is not expired
    issue: >
      When visiting a website that uses an expired Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 50

  - key: valid_issued_date
    group: certificate
    label_as: Valid NotBefore date
    issue: >
      When visiting a website that uses a Certificate with an invalid NotBefore date, it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 20
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -100

  - key: is_self_signed
    group: certificate
    label_as: Certificate self-signed
    issue: >
      Any self-signed Certificate should be untrusted as it offers no security characteristics of TLS that is based on a system that all Certificates have a Root Certificate Authority Trust Anchor.
      When visiting a website that uses a self-signed Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Compromised
        score: -200
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 50

  - key: trust_javase
    group: certificate
    label_as: Trust Store - Java SE
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_ccadb
    group: certificate
    label_as: Trust Store - CCADB
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_rust
    group: certificate
    label_as: Trust Store - Rust
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_froyo
    group: certificate
    label_as: Trust Store - Android 2.2 Froyo
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_gingerbread
    group: certificate
    label_as: Trust Store - Android 2.3 Gingerbread
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_honeycomb
    group: certificate
    label_as: Trust Store - Android 3 Honeycomb
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_ice_cream_sandwich
    group: certificate
    label_as: Trust Store - Android 4 Ice Cream Sandwich
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_kitkat
    group: certificate
    label_as: Trust Store - Android 4.4 KitKat
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_nougat
    group: certificate
    label_as: Trust Store - Android 7 Nougat
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_oreo
    group: certificate
    label_as: Trust Store - Android 8 Oreo
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_pie
    group: certificate
    label_as: Trust Store - Android 9 Pie
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_quince_tart
    group: certificate
    label_as: Trust Store - Android 10 Quince Tart
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_red_velvet_cake
    group: certificate
    label_as: Trust Store - Android 11 Red Velvet Cake
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_snow_cone
    group: certificate
    label_as: Trust Store - Android 12 Snow Cone
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_tiramisu
    group: certificate
    label_as: Trust Store - Android 13 Tiramisu
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_android_upside_down_cake
    group: certificate
    label_as: Trust Store - Android 14 Upside Down Cake
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_certifi
    group: certificate
    label_as: Trust Store - certifi (Python module)
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_russian
    group: certificate
    label_as: Trust Store - MinTsifry Rossii (Russian)
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_libcurl
    group: certificate
    label_as: Trust Store - libcurl
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: trust_dart
    group: certificate
    label_as: Trust Store - Dart Native
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Trusted
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Not Trusted
        score: -500

  - key: basic_constraints_path_length
    group: tls_negotiation
    label_as: Basic Constraints Extension valid path length
    issue: >
      Path length gives the maximum number of intermediate certificates that may follow the root CA certificate typically (or certificate otherwise specifying the constraint) in a valid certification path.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
        url: https://datatracker.ietf.org/doc/html/rfc5280
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 50
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -120

  - key: strong_issuer_validation
    group: certificate
    label_as: Strong Issuer Validation
    issue: >
      Domain Validated (DV) Certificates may be growing in popularity since the browsers ceased showing the organisation name along with a green padlock, but the visual change is not material to the security characteristic associated with Extended Validation (EV) Certificates. When the visual changes occurred the mainstream non-technical or the uneducated in cybersecurity masses all declared that EV Certificates are dead, but the reality and truth of the matter is EV Certificates have never been more important.
      Let's consider some facts:
      1. DV Certificates are extensively (almost solely) used by malicious actors of all types; targeted, watering hole, spray-and-pray, any type leverage DV Certificates because they are free, trusted, and easily to obtain anonymously
      2. A malicious EV Certificates is inherently forged for a target, displaying the forged organisation name to a layman in the browser was an attack on the user trust; Only "IF" the layman was savvy enough they might not trust the forged cert. Today we hide the forgery and as a result there is automatic blind trust and no mechanism for a layman to see the forgery and potentially avoid the threat. To be concise, we used to offer a possible chance to thwart an attacker, now we simply force trust upon users and offer them no means to easily verify anymore. So the changes to EV Certificates in practice made things worse, not better.
      3. Extended Validation certificates offer warranties up to $2M from my personal experience in Australia, When we are talking about a data breach like the one that happened to Equifax due to an expired EV Certificate, it matters.
      4. Legislative, Regulatory, International or Local Privacy Laws, Accreditation held for certain practices, Contractual Obligation (like PCI DSS) - all or any of these may obligate you to utilize at the least an EV Certificate, the DV Certificate has little (if any) security assurances.
      5. The DV Certificate Issuers generally don't offer any additional features, therefore even if you attempt to use certain features like ssl_stapling it will simply be ignored. These Issuers, (pick on Let's Encrypt for this one) simply prefer low-barrier and ease-of-use over any and all security characteristics - so if they don't care, why would you put any trust in their DV Certificates to secure your TLS connections?
      6. An EV Certificate inherently required an out-of-band validation, that is not automated like a DV Certificate. Therefore if an ATO (Account Take-over) or DNS hijacking attack were to be successful the attacker must be persistent and sometimes be physically attacking you. Which all takes significantly more time than the near-instant time it takes for the DV Certificates to be issued. When you operate public hosted (cloud) servers, they are typically ephemeral IP Addresses. The hazard with an IP Address that changes between distinct users is there is a possibility a patient malicious actor may get assigned an IP Address previously held by a valuable customer of the service provider. The way DNS works with TTL and caches means that some requests will still attempt to connect to IP Address you now have that were intended for the previous IP Address owner. If the IP Address the malicious attacker is assigned is rDNS checked and the malicious actor doesn't find anything of value, they can easily discard the IP Address and simply request a new one over and over until they get an IP that is of value to them. This is called IP Churn, and a paper describes how this technique that is an accepted "how things work" can be combined with DV Certificates that are also accepted as "how things work", combined allow for DNS hijacking. This is a proven attack, and the attack vectors with continue to work as long as service providers assign IP Addresses that are still fresh and DV certificates are automatically issued in nanoseconds.
      Put simply, DV Certificates are favoured by attackers and seeing one should make you sceptical, they're issued for ease-of-use and not for security purposes, and there is a trivial DNS take-over attack that can be used for targeted attacks when attackers are sufficiently motivated. An EV Certificate is the distinct opposite, attackers avoid using them unless they are desperate and motivated to ignore the risks to them, they are issued with security focus in spite of the time do validation which is an effective mitigation to the trivial DNS take-over attack.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: Hiding in Plain Sight - A Longitudinal Study of Combosquatting Abuse
        url: https://webcache.googleusercontent.com/search?q=cache:s_bQ24QvDcQJ:https://par.nsf.gov/servlets/purl/10047386+&cd=6&hl=en&ct=clnk&gl=au
      - name: Cloud Strife - Mitigating the Security Risks ofDomain-Validated Certificates
        url: https://webcache.googleusercontent.com/search?q=cache:dQ4atOcEvWEJ:https://kevin.borgolte.me/files/pdf/ndss2018-cloud-strife.pdf+&cd=13&hl=en&ct=clnk&gl=au
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -150

  - key: weak_issuer_validation
    group: certificate
    label_as: Weak Issuer Validation
    issue: >
      You can get issued a DV Certificate without actually validating the domain, Until 2018 the ACME protocol of Let's Encrypt did just this, relying on only SNI for the so-called DV Certificate issuance - not their fault, ACME was designed that way.
      June 2022 there are hundreds of ACME protocol Certificate Authorities issuing DV certificates and few would have learned from the 2018 disclosure and turned off the vulnerable design feature of SNI.
      There are a total of 10 methods of verification defined by ACME, few actually offer any security characteristics that can be said to 'Verify' Domain Ownership, in fact some are designed on purpose to offer DV certificates to customers of website hosting providors that can only modify the HTTP header responses, or less control and can only add a HTML tag! Neitehr of these are verifying control of a domain, let alone Validate domain control! What is a DV certificate if domain validation never occurred?
      Beyond validation itself; The ACME protocol DV Certificate Issuers generally don't offer any additional features, therefore even if you attempt to use certain features like ssl_stapling it will simply be ignored. These Issuers, (pick on Let's Encrypt for this one) simply prefer low-barrier and ease-of-use over any and all security characteristics - so if they don't care, why would you put any trust in their DV Certificates to secure your TLS connections?
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: RFC 8555 - Automatic Certificate Management Environment (ACME)
        url: https://datatracker.ietf.org/doc/html/rfc8555
      - name: Detectify - How I exploited ACME TLS-SNI-01 issuing Let's Encrypt SSL-certs for any domain using shared hosting
        url: https://labs.detectify.com/2018/01/12/how-i-exploited-acme-tls-sni-01-issuing-lets-encrypt-ssl-certs-for-any-domain-using-shared-hosting/
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 40
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -100

  - key: leaf_ca
    group: certificate
    label_as: Leaf Certificate allows impersonation
    issue: >
      Server (leaf) certificates should not be a CA, it could enable impersonation attacks
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: revocation_ocsp_deprecated_algo
    group: certificate
    label_as: Deprecated OCSP Hash Algorithm
    issue: >
      Using the SHA-1 chosen-prefix collision the OCSP Assertion can be forged
    cvss2: AV:N/AC:L/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: CA/Browser Forum
        url: https://cabforum.org/2014/10/16/ballot-118-sha-1-sunset/
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: revocation_ocsp_deprecated_sig
    group: certificate
    label_as: Deprecated OCSP Signature Algorithm
    issue: >
      Using the SHA-1 chosen-prefix collision the OCSP Assertion can be forged
    cvss2: AV:N/AC:L/Au:N/C:P/I:N/A:N
    cvss3: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: CA/Browser Forum
        url: https://cabforum.org/2014/10/16/ballot-118-sha-1-sunset/
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: revocation_ocsp_must_staple
    group: certificate
    label_as: OCSP Must Staple Extension
    issue: >
      The security benefit characteristics of OCSP can only be enforced when the 'Must Staple' flag is present.
      Failing to include the must staple extension in a Domain Validated (DV) or Organisation Validated (OV) Certificate will allow most web browsers and HTTP clients to 'soft-fail' the OCSP check and continue with TLS without an OCSP assertion or knowledge of revocation status.
      In some web browsers and HTTP clients an Extended Validation (EV) certificate will hard-fail when an OCSP assertion is not obtained, but this functionality should not be relied upon as there have been many changes made by web browsers that are divergent from standards and break assumed security guarantees suddenly become a vulnerability.
      Everywhere the OCSP Must Staple Extension is accepted, it will be enforced for all certificates regardless of validation semantics.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -120

  - key: revocation_ocsp_staple
    group: certificate
    label_as: OCSP Stapling Extension
    issue: >
      When an OCSP assertion is not included 'stapled' with the certificate, an weakness in the clients ability to obtain a remote assertion, when the client attempts to establish a connection with the OCSP responder an additional MITM attack vector is available and forged OCSP assertions may be provided allowing an attacker to sppof the revocation status of a certificate to cause a denial of service or establish trust where otherwise a compromise would have been detected.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 40
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -60

  - key: revocation_ocsp
    group: certificate
    label_as: OCSP Revocation
    issue: >
      A revoked certificate that remains in use is an indication of misconfiuguration, misuse, or abuse.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Not Revoked
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Revoked
        score: -200

  - key: valid_key_usage_leaf
    group: certificate
    label_as: Leaf Certificate valid for TLS usage
    issue: >
      If the server (leaf) certificate was issued to serve the purpose of providing a TLS connection from the server-side.
      Any failure to include the correct signed (by the issuer) values would indicate a forged certificate and compromised connection.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -120

  - key: client_auth_expected
    group: tls_negotiation
    label_as: Client Certificate (MTLS) expected
    issue: >
      The server indivated client certificate subject's it will accept, or the client presented a Certificate to initiate an MTLS connection with this server.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[bold][cyan]INFO![/cyan][/bold]"
        display_as: Client Certificate Expected
        score: 0

  - key: client_auth_permitted
    group: tls_negotiation
    label_as: Certificate was issued for the prupose of client Authentication
    issue: >
      If the Certificate being used for client Authentication (MTLS) was not issued for that purpose then most properly configured servers will drop the connection.
      If either the client Certificate or TLS server is misconfigred the TLS connection should be distrusted as it may be compromised, ineffetive at providing the intended security characteristics, or simply not meet the requirements for TLS which is designed to have a chain of trust that relies on Certificate issuers to follow the specification when issuing Certificates and also TLS servers configured per the specification.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
        url: https://datatracker.ietf.org/doc/html/rfc5280
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -150

  - key: client_auth_trusted
    group: tls_negotiation
    label_as: Client Certificate (MTLS) Trusted
    issue: >
      Certificates should be treated as suspicious when they do not have a trusted Root Certificate Authority, as it offers no security characteristics of TLS built on Trust Anchor system.
      When visiting a website that uses an untrusted Certificate it is likely the TLS connection is not secure.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
        url: https://datatracker.ietf.org/doc/html/rfc5280
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 120
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: client_auth_valid_subject
    group: tls_negotiation
    label_as: Server accepted Client Certificate
    issue: >
      If the Certificate being used for client Authentication (MTLS) was not matched to a subject sent by the server to indicate accepted client Certificates then most properly configured servers will drop the connection.
      If a connection is established and the TLS server was misconfigred the TLS connection should be distrusted as it may be compromised, ineffetive at providing the intended security characteristics, or simply not meet the requirements for TLS which is designed to have a chain of trust that relies on Certificate issuers to follow the specification when issuing Certificates and also TLS servers configured per the specification.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
      - name: RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
        url: https://datatracker.ietf.org/doc/html/rfc5280
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 100
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -150

  - key: client_authentication
    group: tls_negotiation
    label_as: Client Authentication Established
    issue: >
      A client Certificate was presented and Mutual Authentication (MTLS) expected, if the presented client Certificate did not match the server sent subjects or the Certificate was not issued by a trusted Root Certificate Authority this connection attempt should not be considered secure.
      If a connection is established and the TLS server was misconfigred the TLS connection should be distrusted as it may be compromised, ineffetive at providing the intended security characteristics, or simply not meet the requirements for TLS which is designed to have a chain of trust that relies on Certificate issuers to follow the specification when issuing Certificates and also TLS servers configured per the specification.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 3.5
            - 6.5.3
        - version: 4.0
          requirements:
            - 4.2.1
            - 6.2.4
    references:
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 200
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -500

  - key: compression_support
    group: transport
    label_as: HTTPS transport compression
    issue: >
      Multiple compression vulnerabilities exist across all SS/TLS versions when HTTPS transport naively utilises compression without taking proper care to mitigate all known attacks.
      Due to the nature and trivial complexity of most compression related attacks, and mitigated both known and inknown threats may be a futile effort, it is best practice to avoid compression and instead rely on minimising the data being transmitted to only what is needed.
    cve:
      - CVE-2022-32206
      - CVE-2022-1271
      - CVE-2020-5933
      - CVE-2018-25032
      - CVE-2013-3587
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 180
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: session_resumption_caching
    group: tls_negotiation
    label_as: Session resumption caching
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: session_resumption_ticket_hint
    group: tls_negotiation
    label_as: Session resumption ticket hints
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: session_resumption_tickets
    group: tls_negotiation
    label_as: Session resumption tickets
    issue: >
      TODO
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 60
      - value: True
        evaluation_value: "[khaki1]WARN![/khaki1]"
        display_as: Misconfigured
        score: -100

  - key: fips
    group: compliance
    label_as: FIPS
    issue: >
      TODO
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: nist
    group: compliance
    label_as: NIST
    issue: >
      TODO
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: pci_dss_3_2
    group: compliance
    label_as: PCI DSS 3.2.1
    issue: >
      TODO
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: pci_dss_4_0
    group: compliance
    label_as: PCI DSS 4.0
    issue: >
      TODO
    references:
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_block_clipboard
    group: transport
    label_as: Block reading clipboard contents
    issue: >
      Websites are not expected to read contents of the users' clipboard, which commonly contains private or sensitive information.
      A webserver can instruct web browsers to block this feature so that any malicious scripts cannot leverage the API.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_block_deprecated
    group: transport
    label_as: Block the use of deprecated APIs
    issue: >
      Websites that are maintained should not be utilising deprecated features, that commonly exhibit insecure functionality or vulnerable to abuse.
      A webserver can instruct web browsers to block these features so that any malicious scripts cannot leverage the API.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_permissions_policy
    group: transport
    label_as: Policy-controlled browser features
    issue: >
      A webserver can instruct web browsers to allowlist on the features the site owner intends to utilise, blocking all unused features so that any malicious scripts cannot leverage the unused features or API.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_coep
    group: transport
    label_as: Require Cross-Origin-Embedder-Policy
    issue: >
      The server sent a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (using CORP or CORS).
      The default configuration when this is not sent allows the document to fetch cross-origin resources which leaves users' vulnerable to cross-site scripting (XSS) attacks.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_coop
    group: transport
    label_as: Same-Origin Cross-Origin-Opener-Policy
    issue: >
      The server sent a response header allows you to ensure a top-level document does not share a browsing context group with cross-origin documents.
      COOP will process-isolate your document and potential attackers can't access your global object if they were to open it in a popup, preventing a set of cross-origin attacks dubbed XS-Leaks.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_corp
    group: transport
    label_as: Same-Origin Cross-Origin-Resource-Policy
    issue: >
      The server sent a response header that prevents a document from loading any cross-origin resources that don't explicitly grant the document permission (CORS).
      The default configuration when this is not sent allows the document to fetch cross-origin resources which leaves users' vulnerable to cross-site scripting (XSS) attacks.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_csp
    group: transport
    label_as: Content-Security-Policy
    issue: >
      The server sent a response header allows web site administrators to control resources the user agent is allowed to load for a given page. With a few exceptions, policies mostly involve specifying server origins and script endpoints. This helps guard against cross-site scripting attacks cross-site scripting (XSS)
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_upgrade_insecure
    group: transport
    label_as: Upgrade Insecure Requests
    issue: >
      The server sent a response header to inform supporting browsers to ensure TLS is used even when misconfigured scripts attempt insecure connections.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_expectct
    group: transport
    label_as: Certificate Transparency Report URI
    issue: >
      The server sent a response header to inform supporting browsers to ensure opt in to reporting and/or enforcement of Certificate Transparency requirements, to prevent the use of misissued certificates for that site from going unnoticed.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_hsts
    group: transport
    label_as: HTTP Strict-Transport-Security
    issue: >
      The server sent a response header to inform supporting browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_nosniff
    group: transport
    label_as: nosniff X-Content-Type-Options
    issue: >
      The server sent a response header to inform supporting browsers that the MIME types advertised in the Content-Type headers should be followed and not be changed. The header allows you to avoid MIME type sniffing by saying that the MIME types are deliberately configured.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_referrer_policy
    group: transport
    label_as: unsafe URL Referrer-Policy
    issue: >
      The Referrer-Policy HTTP header controls how much referrer information (sent with the Referer header) should be included with requests.
      This policy will leak potentially-private information from HTTPS resource URLs to insecure origins. Carefully consider the impact of this setting.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
    anotate_results:
      - value: False
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: True
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_xfo
    group: transport
    label_as: Safe HTML iframe options
    issue: >
      The server sent a response header to inform supporting browsers whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>. Sites can use this to avoid click-jacking attacks, by ensuring that their content is not embedded into other sites.
      The added security is provided only if the user accessing the document is using a browser that supports X-Frame-Options.
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

  - key: header_xss
    group: transport
    label_as: Block mode XSS-Protection
    issue: >
      The server sent a response header to inform supporting browsers to stop pages from loading when they detect reflected cross-site scripting (XSS) attacks. These protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript ('unsafe-inline').
    compliance:
      "PCI DSS":
        - version: 3.2.1
          requirements:
            - 6.5.4
            - 6.6
        - version: 4.0
          requirements:
            - 6.4.1
            - 6.4.2
    references:
      - name: MDN Web Docs
        url: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    anotate_results:
      - value: True
        evaluation_value: "[dark_sea_green2]PASS![/dark_sea_green2]"
        display_as: Good Configuration
        score: 80
      - value: False
        evaluation_value: "[light_coral]FAIL![/light_coral]"
        display_as: Misconfigured
        score: -200

"PCI DSS 3.2.1":
  "1": Configure and use firewalls to protect cardholder data
  "1.1": Create and implement standards for configuration of firewalls and routers
  "1.2": Create a firewall and router configuration that restricts connections between untrusted networks and all system components in the cardholder data environment
  "1.3": Restrict direct global access to any system component of the cardholder data medium over the internet
  "1.4": Install personal firewall software on all mobile devices that are connected to the internet and used to access the network when they are out of the network
  "1.5": Make sure that security policies and operational procedures for managing firewalls are documented, in use, and known to all affected parties
  "2": Do not use the vendor's default settings for system passwords and other security parameters
  "2.1": Always change the default settings and values provided by the manufacturer and remove or disable unnecessary default accounts before installing any system on the network
  "2.2": Create configuration standards for all components of the system
  "2.3": Encrypt all non-console administrative access to devices using strong encryption
  "2.4": Keep an inventory of all PCI DSS in-scope system components
  "2.5": Make sure that security policies and operational procedures are documented, in use, and known to all affected parties to manage the manufacturer's default values and other safety parameters
  "2.6": Shared hosting service providers must protect the environment and cardholder data hosted by each organization
  "3": Protect stored cardholder data
  "3.1": Keep cardholder data storage to a minimum by developing and implementing policies, procedures and processes for data retention and destruction of cardholder data (CHD)
  "3.2": Do not store sensitive authentication data after authorization, even if it is encrypted
  "3.3": If the primary account number (PAN) has to be displayed, mask it to view it
  "3.4": Make the primary account number unreadable wherever it is stored
  "3.5": Create and implement procedures to protect the keys used to protect stored cardholder data from disclosure and misuse
  "3.6": Document and implement all key management processes and encryption key procedures used to encrypt cardholder data
  "3.7": Security policies and operational procedures must be documented, used and known to all affected parties to protect stored cardholder data
  "4": Encrypt cardholder data when transmitting over open, public networks
  "4.1": Use strong encryption and security protocols to protect sensitive cardholder data during transmission over open, public networks
  "4.2": Never send Primary Account Number (PAN) information without password over end-user messaging technologies
  "4.3": To encrypt the transmission of cardholder data, ensure that security policies and operational procedures are documented, in use, and known to all affected parties
  "5": Protect all systems against malware and update anti-virus software regularly
  "5.1": Install anti-virus software on all systems that are commonly affected by malware
  "5.2": Make sure all anti-virus mechanisms are working properly
  "5.3": Anti-virus software should work effectively and cannot be disabled by users
  "5.4": Ensure that security policies and operational procedures are documented, in use, and known to all affected parties to protect systems against malware
  "6": Develop and maintain secure systems and applications
  "6.1": Establish a process to identify vulnerabilities using reputable outside sources and assign a risk ranking to newly discovered vulnerabilities
  "6.2": Ensure that all system components and software are protected from known vulnerabilities by installing the applicable security patches provided by the manufacturer. Install critical security patches within a month
  "6.3": Develop internal and external software applications securely
  "6.3.1": Remove development, test or custom application accounts, user IDs, and passwords before applications become active or available to customers
  "6.3.2": Perform code reviews before applications are become active or released to customers to identify possible coding vulnerabilities
  "6.4": Follow change control processes and procedures for all changes to system components
  "6.4.1": Separate development and test environments from live environments and implement separation with access controls
  "6.4.2": Separation of duties between development, testing and live environments is required
  "6.4.3": Production data (live PANs) are not used for testing or development
  "6.4.4": Test data and accounts must be removed from system components before the system is enabled before going live
  "6.4.5": Change control procedures should include the following
  "6.4.5.1": Document the impact of the change
  "6.4.5.2": Changes require documented change approval by authorized parties
  "6.4.5.3": Perform functionality test to verify that the change does not adversely affect the security of the system
  "6.4.5.4": Establish back-out procedures for changes
  "6.4.6": After a significant change is complete, all relevant PCI DSS requirements should be applied to all new or modified systems and networks, and documentation updated accordingly
  "6.5": Address common coding vulnerabilities in software development processes
  "6.5.1": Consider injection flaws, specifically SQL injection, also OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws
  "6.5.2": >
    Buffer overflows; attackers can be used to do all kinds of operations if appropriate border controls are not applied. When this happens, the attacker will have the ability to add malicious code to the end of the buffer and then push the malicious code into executable memory space by overflowing the buffer. The malicious code is then run and usually allows the attacker remote access to the application or the infected system.
    To avoid buffer overflows, encoding techniques including:
    - Appropriate boundary controls should be implemented.
    - Input data must be truncated accordingly.
  "6.5.3": >
    Insecure cryptographic storage should be handled with the following coding techniques:
    - Cryptographic flaws must be prevented.
    - Strong cryptographic algorithms and keys should be used.
  "6.5.4": Unsecured communications need to be handled with coding techniques that properly encrypt all sensitive communications.
  "6.5.5": Improper error handling should be determined in software development policies, and procedures and error messages should be handled with information-proof coding techniques.
  "6.5.6": All high risk vulnerabilities identified during the vulnerability identification process must be addressed
  "6.5.7": Cross-Site Scripting (XSS)
  "6.5.8": >
    Inappropriate access control
    A direct object reference occurs when a developer presents a reference to an internal application object, such as a file, directory, database record, or key, as a URL or form parameter. Attackers can change these references to access other unauthorized objects.
    Access controls must be applied consistently at the application layer and business logic for all URLs. The only way for an application to protect sensitive functionality is to prevent links or URLs from being viewed by unauthorized users.
    Attackers can perform unauthorized actions by directly accessing these URLs. An attacker can enumerate and navigate the directory structure of a website so that they can gain access to unauthorized information and learn more about the functioning of the site for later exploitation.
    If user interfaces allow access to unauthorized functions, this access can result in unauthorized persons gaining access to privileged credentials or cardholder data. Only authorized users should be allowed to access direct object references to sensitive resources. Limiting access to data sources will help prevent cardholder data from being made available to unauthorized sources.
    Unsafe direct object references in software development policies and procedures, inability to restrict URL access or inappropriate access control, such as directory traversal, should be addressed with coding techniques that include:
    - Users must be properly authenticated.
    - Entries should be sanitized.
    - Internal object references should not be disclosed to users.
    - User interfaces that do not allow access to unauthorized functions should be designed.
  "6.5.9": Cross-site request forgery (CSRF)
  "6.5.10": Broken authentication and session management
  "6.6": Constantly address new threats and vulnerabilities for Internet-facing web applications and ensure that these applications are protected from known attacks
  "6.7": Ensure security policies and operational procedures for developing and maintaining secure systems and applications are documented, in use, and known to all affected parties
  "7": Restrict access to cardholder data based on business requirements
  "7.1": Limit access to system components and cardholder data only to those who need it for their job functions
  "7.2": Create secure access control systems
  "7.3": Ensure that security policies and operational procedures to restrict access to cardholder data are documented, in use, and known to all affected parties
  "8": Identify and authenticate access to system components
  "8.1": Define and implement policies and procedures to ensure correct user identity management for users and administrators across all system components
  "8.2": Provide appropriate user authentication management for users and administrators in all system components
  "8.3": Secure all individual administrative access to the CDE and all remote access to the CDE using multi-factor authentication
  "8.4": Document and communicate authentication policies and procedures to all users
  "8.5": Do not use group, shared or public IDs, passwords or other authentication methods
  "8.6": Where other authentication mechanisms are used, the use of these mechanisms should be assigned as follows
  "8.7": Limit all access to any database containing cardholder data
  "8.8": Ensure that security policies and operational procedures for authentication and identification are documented, in use, and known to all affected parties
  "9": Restrict physical access to cardholder data
  "9.1": Create and use appropriate facility access controls to limit and monitor physical access to systems in the cardholder data environment
  "9.2": Develop procedures to distinguish between staff and visitors easily
  "9.3": Restrict physical access to sensitive areas for employees as follows
  "9.4": Follow procedures to identify and empower visitors
  "9.5": Protect all media that contains physically sensitive data
  "9.6": Have strict control over the internal or external distribution and transmission of any media
  "9.7": Have strict control over media storage and accessibility
  "9.8": Destroy media when it is no longer needed for business or legal reasons
  "9.9": Protect devices that receive payment card data through physical interaction from tampering and replacement
  "9.10": Ensure that security policies and operational procedures to restrict physical access to cardholder data are documented, in use, and known to all affected parties
  "10": Track and monitor all access to network resources and cardholder data
  "10.1": Create a process that connects access to system components to each user
  "10.2": Set up an automatic log review mechanism to reproduce events
  "10.3": Record at least the following information for events occurring in all system components
  "10.4": Synchronize all critical system clocks and times using time synchronization technology
  "10.5": Keep the logs in a way that cannot be altered
  "10.6": Regularly review logs and security events for all system components to identify abnormalities or suspicious activity
  "10.7": Retain the log history for at least one year and have at least three months of data ready for analysis
  "10.8": Create and implement processes for timely detection and reporting of failures of critical security control systems for service providers
  "10.9": Ensure that security policies and operational procedures are documented, in use, and known to all affected parties to monitor all access to network resources and cardholder data
  "11": Test security systems and processes regularly
  "11.1": Create processes to test the presence of wireless access points (802.11), and identify all authorized and unauthorized wireless access points quarterly
  "11.2": Perform internal and external network vulnerability scans at least every three months and after a significant change in the network
  "11.3": Apply a methodology for penetration testing
  "11.4": Use intrusion detection or intrusion prevention techniques to detect or prevent network intrusion
  "11.5": Set up a change detection mechanism to detect unauthorized modification of critical system files, configuration files or content files
  "11.6": Ensure that security policies and operational procedures for security monitoring and testing are documented, in use, and known to all affected parties
  "12": Create a policy that addresses information security for all staff
  "12.1": Create and publish an information security policy
  "12.2": Create and implement a risk assessment process
  "12.3": Acceptable usage policies for critical technologies should be developed, and the appropriate use of these technologies should be defined
  "12.4": Ensure that security policy and procedures clearly define information security responsibilities for all personnel
  "12.5": Assign information security management responsibilities to a person or team
  "12.6": Implement a formal information security awareness program to inform all staff about the importance of cardholder data security
  "12.7": To minimize the risk of attack from local sources, run a history scan of candidates before hiring
  "12.8": Create and implement policies and procedures to manage service providers where cardholder data is shared, or that may affect the security of cardholder data
  "12.9": Service providers must notify their customers in writing that they are responsible for the security of the cardholder data they store, process or transmit on behalf of the customer
  "12.10": Create and implement an incident response plan. Be prepared to respond immediately to violations
  "12.11": Service providers should evaluate at least quarterly to verify that personnel are following security policies and operational procedures

"PCI DSS 4.0":
  "1": Install and Maintain Network Security Controls
  "1.1": Processes and mechanisms for installing and maintaining network security controls are defined and understood
  "1.1.1": All security policies and operational procedures that are identified in Requirement 1 are; Documented, Kept up to date, In use, Known to all affected parties
  "1.1.2": Roles and responsibilities for performing activities in Requirement 1 are documented, assigned, and understood
  "1.2": Network security controls (NSCs) are configured and maintained
  "1.2.1": Configuration standards for NSC rulesets are; Defined, Implemented, Maintained
  "1.2.2": All changes to network connections and to configurations of NSCs are approved and managed in accordance with the change control process defined at Requirement 6.5.1.
  "1.2.3": An accurate network diagram(s) is maintained that shows all connections between the CDE and other networks, including any wireless networks
  "1.2.4": A3.7.5n accurate data-flow diagram(s) is maintained that meets the following; Shows all account data flows across systems and networks, Updated as needed upon changes to the environment
  "1.2.5": All services, protocols, and ports allowed are identified, approved, and have a defined business need
  "1.2.6": Security features are defined and implemented for all services, protocols, and ports that are in use and considered to be insecure, such that the risk is mitigated
  "1.2.7": Configurations of NSCs are reviewed at least once every six months to confirm they are relevant and effective
  "1.2.8": >
    Configuration files for NSCs are:
    - Secured from unauthorized access
    - Kept consistent with active network configurations
  "1.3": Network access to and from the cardholder data environment is restricted
  "1.3.1": >
    Inbound traffic to the CDE is restricted as follows:
    - To only traffic that is necessary.
    - All other traffic is specifically denied.
  "1.3.2": >
    Outbound traffic from the CDE is restricted as follows:
    - To only traffic that is necessary.
    - All other traffic is specifically denied.
  "1.3.3": >
    NSCs are installed between all wireless networks and the CDE, regardless of whether the wireless network is a CDE, such that:
    - All wireless traffic from wireless networks into the CDE is denied by default.
    - Only wireless traffic with an authorized business purpose is allowed into the CDE.
  "1.4": Network connections between trusted and untrusted networks are controlled
  "1.4.1": NSCs are implemented between trusted and untrusted networks
  "1.4.2": >
    Inbound traffic from untrusted networks to trusted networks is restricted to:
    - Communications with system components that are authorized to provide publicly accessible services, protocols, and ports.
    - Stateful responses to communications initiated by system components in a trusted network.
    - All other traffic is denied.
  "1.4.3": Anti-spoofing measures are implemented to detect and block forged source IP addresses from entering the trusted network.
  "1.4.4": System components that store cardholder data are not directly accessible from untrusted networks.
  "1.4.5": The disclosure of internal IP addresses and routing information is limited to only authorized parties.
  "1.5": Risks to the CDE from computing devices that are able to connect to both untrusted networks and the CDE are mitigated.
  "1.5.1": >
    Security controls are implemented on any computing devices, including company- and employee-owned devices, that connect to both untrusted networks (including the Internet) and the CDE as follows:
    - Specific configuration settings are defined to prevent threats being introduced into the entity's network.
    - Security controls are actively running.
    - Security controls are not alterable by users of the computing devices unless specifically documented and authorized by management on a case-by-case basis for a limited period.
  "2": Apply Secure Configurations to All System Components
  "2.1": Processes and mechanisms for applying secure configurations to all system components are defined and understood.
  "2.1.1": >
    All security policies and operational procedures that are identified in Requirement 2 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "2.1.2": Roles and responsibilities for performing activities in Requirement 2 are documented, assigned, and understood.
  "2.2": System components are configured and managed securely
  "2.2.1": >
    Configuration standards are developed, implemented, and maintained to:
    - Cover all system components.
    - Address all known security vulnerabilities.
    - Be consistent with industry-accepted system hardening standards or vendor hardening recommendations.
    - Be updated as new vulnerability issues are identified, as defined in Requirement 6.3.1.
    - Be applied when new systems are configured and verified as in place before or immediately after a system component is connected to a production environment.
  "2.2.2": >
    Vendor default accounts are managed as follows:
    - If the vendor default account(s) will be used, the default password is changed per Requirement 8.3.6.
    - If the vendor default account(s) will not be used, the account is removed or disabled.
  "2.2.3": >
    Primary functions requiring different security levels are managed as follows:
    - Only one primary function exists on a system component,
    OR
    - Primary functions with differing security levels that exist on the same system component are isolated from each other,
    OR
    - Primary functions with differing security levels on the same system component are all secured to the level required by the function with the highest security need.
  "2.2.4": >
    Only necessary services, protocols, daemons, and functions are enabled, and all unnecessary functionality is removed or disabled.
  "2.2.5": >
    If any insecure services, protocols, or daemons are present:
    - Business justification is documented.
    - Additional security features are documented and implemented that reduce the risk of using insecure services, protocols, or daemons.
  "2.2.6": System security parameters are configured to prevent misuse.
  "2.2.7": All non-console administrative access is encrypted using strong cryptography.
  "2.3": Wireless environments are configured and managed securely.
  "2.3.1": >
    For wireless environments connected to the CDE or transmitting account data, all wireless vendor defaults are changed at installation or are confirmed to be secure, including but not limited to:
    - Default wireless encryption keys.
    - Passwords on wireless access points.
    - SNMP defaults.
    - Any other security-related wireless vendor defaults.
  "2.3.2": >
    For wireless environments connected to the CDE or transmitting account data, wireless encryption keys are changed as follows:
    - Whenever personnel with knowledge of the key leave the company or the role for which the knowledge was necessary.
    - Whenever a key is suspected of or known to be compromised.
  "3": Protect Stored Account Data
  "3.1": Processes and mechanisms for protecting stored account data are defined and understood.
  "3.1.1": >
    All security policies and operational procedures that are identified in Requirement 3 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "3.1.2": Roles and responsibilities for performing activities in Requirement 3 are documented, assigned, and understood.
  "3.2": Storage of account data is kept to a minimum.
  "3.2.1": >
    Account data storage is kept to a minimum through implementation of data retention and disposal policies, procedures, and processes that include at least the following:
    - Coverage for all locations of stored account data.
    - Coverage for any sensitive authentication data (SAD) stored prior to completion of authorization. This bullet is a best practice until its effective date; refer to Applicability Notes below for details.
    - Limiting data storage amount and retention time to that which is required for legal or regulatory, and/or business requirements.
    - Specific retention requirements for stored account data that defines length of retention period and includes a documented business justification.
    - Processes for secure deletion or rendering account data unrecoverable when no longer needed per the retention policy.
    - A process for verifying, at least once every three months, that stored account data exceeding the defined retention period has been securely deleted or rendered unrecoverable.
  "3.3": Sensitive authentication data (SAD) is not stored after authorization.
  "3.3.1": SAD is not retained after authorization, even if encrypted. All sensitive authentication data received is rendered unrecoverable upon completion of the authorization process.
  "3.3.1.1": The full contents of any track are not retained upon completion of the authorization process.
  "3.3.1.2": The card verification code is not retained upon completion of the authorization process.
  "3.3.1.3": The personal identification number (PIN) and the PIN block are not retained upon completion of the authorization process.
  "3.3.2": SAD that is stored electronically prior to completion of authorization is encrypted using strong cryptography.
  "3.3.3": >
    Additional requirement for issuers and companies that support issuing services and store sensitive authentication data: Any storage of sensitive authentication data is:
    - Limited to that which is needed for a legitimate issuing business need and is secured.
    - Encrypted using strong cryptography. This bullet is a best practice until 31 March 2025, after which it will be required as part of Requirement 3.3.3 and must be fully considered during a PCI DSS assessment.
  "3.4": Access to displays of full PAN and ability to copy PAN is restricted.
  "3.4.1": PAN is masked when displayed (the BIN and last four digits are the maximum number of digits to be displayed), such that only personnel with a legitimate business need can see more than the BIN and last four digits of the PAN.
  "3.4.2": >
    When using remote-access technologies, technical controls prevent copy and/or relocation of PAN for all personnel, except for those with documented, explicit authorization and a legitimate, defined business need.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "3.5": Primary account number (PAN) is secured wherever it is stored.
  "3.5.1": >
    PAN is rendered unreadable anywhere it is stored by using any of the following approaches:
    - One-way hashes based on strong cryptography of the entire PAN.
    - Truncation (hashing cannot be used to replace the truncated segment of PAN).
    If hashed and truncated versions of the same PAN, or different truncation formats of the same PAN, are present in an environment,are in place such that the different versions cannot be correlated to reconstruct the original PAN.
    - Index tokens.
    - Strong cryptography with associated key-management processes and procedures.
  "3.5.1.1": >
    Hashes used to render PAN unreadable (per the first bullet of Requirement 3.5.1) are keyed cryptographic hashes of the entire PAN, with associated key-management processes and procedures in accordance with Requirements 3.6 and 3.7.
    Note: This requirement is considered a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "3.5.1.2": >
    If disk-level or partition-level encryption (rather than file-, column-, or field-level database encryption) is used to render PAN unreadable, it is implemented only as follows:
    - On removable electronic media
    OR
    - If used for non-removable electronic media, PAN is also rendered unreadable via another mechanism that meets Requirement 3.5.1.
    Note: This requirement is considered a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment
  "3.5.1.3": >
    If disk-level or partition-level encryption is used (rather than file-, column-, or field--level database encryption) to render PAN unreadable, it is managed as follows:
    - Logical access is managed separately and independently of native operating system authentication and access control mechanisms.
    - Decryption keys are not associated with user accounts.
    - Authentication factors (passwords, passphrases, or cryptographic keys) that allow access to unencrypted data are stored securely.
  "3.6": Cryptographic keys used to protect stored account data are secured.
  "3.6.1": >
    Procedures are defined and implemented to protect cryptographic keys used to protect stored account data against disclosure and misuse that include:
    - Access to keys is restricted to the fewest number of custodians necessary.
    - Key-encrypting keys are at least as strong as the data-encrypting keys they protect.
    - Key-encrypting keys are stored separately from data-encrypting keys.
    - Keys are stored securely in the fewest possible locations and forms.
  "3.6.1.1": >
    Additional requirement for service providers only: A documented description of the cryptographic architecture is maintained that includes:
    - Details of all algorithms, protocols, and keys used for the protection of stored account data, including key strength and expiry date.
    - Preventing the use of the same cryptographic keys in production and test environments. This bullet is a best practice until its effective date; refer to
    Applicability Notes below for details.
      "- Description of the key usage for each key.
      "- Inventory of any hardware security modules (HSMs), key management systems (KMS), and other secure cryptographic devices (SCDs) used for key management, including type and location of devices, as outlined in Requirement 12.3.4.
  "3.6.1.2": >
    Secret and private keys used to encrypt/decrypt stored account data are stored in one (or more) of the following forms at all times:
    - Encrypted with a key-encrypting key that is at least as strong as the data-encrypting key, and that is stored separately from the data-encrypting key.
    - Within a secure cryptographic device (SCD), such as a hardware security module (HSM) or PTS-approved point-of-interaction device.
    - As at least two full-length key components or key shares, in accordance with an industry-accepted method.
  "3.6.1.3": Access to cleartext cryptographic key components is restricted to the fewest number of custodians necessary.
  "3.6.1.4": Cryptographic keys are stored in the fewest possible locations.
  "3.7": Where cryptography is used to protect stored account data, key management processes and procedures covering all aspects of the key lifecycle are defined and implemented.
  "3.7.1": Key-management policies and procedures are implemented to include generation of strong cryptographic keys used to protect stored account data.
  "3.7.2": Key-management policies and procedures are implemented to include secure distribution of cryptographic keys used to protect stored account data.
  "3.7.3": Key-management policies and procedures are implemented to include secure storage of cryptographic keys used to protect stored account data.
  "3.7.4": >
    Key management policies and procedures are implemented for cryptographic key changes for keys that have reached the end of their cryptoperiod, as defined by the associated application vendor or key owner, and based on industry best practices and guidelines, including the following:
    - A defined cryptoperiod for each key type in use.
    - A process for key changes at the end of the defined cryptoperiod.
  "3.7.5": >
    Key management policies procedures are implemented to include the retirement, replacement, or destruction of keys used to protect stored account data, as deemed necessary when:
    - The key has reached the end of its defined cryptoperiod.
    - The integrity of the key has been weakened, including when personnel with knowledge of a cleartext key component leaves the company, or the role for which the key component was known.
    - The key is suspected of or known to be compromised.
    - Retired or replaced keys are not used for encryption operations.
  "3.7.6": Where manual cleartext cryptographic key-management operations are performed by personnel, key-management policies and procedures are implemented include managing these operations using split knowledge and dual control.
  "3.7.7": Key management policies and procedures are implemented to include the prevention of unauthorized substitution of cryptographic keys.
  "3.7.8": Key management policies and procedures are implemented to include that cryptographic key custodians formally acknowledge (in writing or electronically) that they understand and accept their key-custodian responsibilities.
  "3.7.9": >
    Additional requirement for service providers only: Where a service provider shares cryptographic keys with its customers for transmission or storage of account data, guidance on secure transmission, storage and updating of such keys is documented and distributed to the service provider's customers.
  "4": Protect Cardholder Data with Strong Cryptography During Transmission Over Open, Public Networks
  "4.1": Processes and mechanisms for protecting cardholder data with strong cryptography during transmission over open, public networks are defined and documented.
  "4.1.1": >
    All security policies and operational procedures that are identified in Requirement 4 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "4.1.2": Roles and responsibilities for performing activities in Requirement 4 are documented, assigned, and understood.
  "4.2": PAN is protected with strong cryptography during transmission.
  "4.2.1": >
    Strong cryptography and security protocols are implemented as follows to safeguard PAN during transmission over open, public networks:
    - Only trusted keys and certificates are accepted.
    - Certificates used to safeguard PAN during transmission over open, public networks are confirmed as valid and are not expired or revoked. This bullet is a best practice until 31 March 2025, after which it will be required as part of Requirement 4.2.1 and must be fully considered during a PCI DSS assessment.
    - The protocol in use supports only secure versions or configurations and does not support fallback to, or use of insecure versions, algorithms, key sizes, or implementations.
    - The encryption strength is appropriate for the encryption methodology in use.
  "4.2.1.1": >
    An inventory of the entity's trusted keys and certificates used to protect PAN during transmission is maintained.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "4.2.1.2": >
    Wireless networks transmitting PAN or connected to the CDE use industry best practices to implement strong cryptography for authentication and transmission.
  "4.2.2": PAN is secured with strong cryptography whenever it is sent via end-user messaging technologies.
  "5": Protect All Systems and Networks from Malicious Software
  "5.1": Processes and mechanisms for protecting all systems and networks from malicious software are defined and understood.
  "5.1.1": >
    All security policies and operational procedures that are identified in Requirement 5 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "5.1.2": Roles and responsibilities for performing activities in Requirement 5 are documented, assigned, and understood.
  "5.2": Malicious software (malware) is prevented or detected and addressed.
  "5.2.1": >
    An anti-malware solution(s) is deployed on all system components, except for those system components identified in periodic evaluations per Requirement 5.2.3 that concludes the system components are not at risk from malware.
  "5.2.2": >
    The deployed anti-malware solution(s):
    - Detects all known types of malware.
    - Removes, blocks, or contains all known types of malware.
  "5.2.3": >
    Any system components that are not at risk for malware are evaluated periodically to include the following:
    - A documented list of all system components not at risk for malware.
    - Identification and evaluation of evolving malware threats for those system components.
    - Confirmation whether such system components continue to not require anti-malware protection.
  "5.2.3.1": >
    The frequency of periodic evaluations of system components identified as not at risk for malware is defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "5.3": Anti-malware mechanisms and processes are active, maintained, and monitored.
  "5.3.1": The anti-malware solution(s) is kept current via automatic updates.
  "5.3.2": >
    The anti-malware solution(s):
    - Performs periodic scans and active or real-time scans.
    OR
    - Performs continuous behavioral analysis of systems or processes.
  "5.3.2.1": >
    If periodic malware scans are performed to meet Requirement 5.3.2, the frequency of scans is defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "5.3.3": >
    For removable electronic media, the anti-malware solution(s):
    - Performs automatic scans of when the media is inserted, connected, or logically mounted,
    OR
    - Performs continuous behavioral analysis of systems or processes when the media is inserted, connected, or logically mounted.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "5.3.4": Audit logs for the anti-malware solution(s) are enabled and retained in accordance with Requirement 10.5.1.
  "5.3.5": Anti-malware mechanisms cannot be disabled or altered by users, unless specifically documented, and authorized by management on a case-by-case basis for a limited time period.
  "5.4": Anti-phishing mechanisms protect users against phishing attacks.
  "5.4.1": >
    Processes and automated mechanisms are in place to detect and protect personnel against phishing attacks.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "6": Develop and Maintain Secure Systems and Software
  "6.1": Processes and mechanisms for developing and maintaining secure systems and software are defined and understood.
  "6.1.1": >
    All security policies and operational procedures that are identified in Requirement 6 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "6.1.2": Roles and responsibilities for performing activities in Requirement 6 are documented, assigned, and understood.
  "6.2": Bespoke and custom software are developed securely.
  "6.2.1": >
    Bespoke and custom software are developed securely, as follows:
    - Based on industry standards and/or best practices for secure development.
    - In accordance with PCI DSS (for example, secure authentication and logging).
    - Incorporating consideration of information security issues during each stage of the software development lifecycle.
  "6.2.2": >
    Software development personnel working on bespoke and custom software are trained at least once every 12 months as follows:
    - On software security relevant to their job function and development languages.
    - Including secure software design and secure coding techniques.
    - Including, if security testing tools are used, how to use the tools for detecting vulnerabilities in software.
  "6.2.3": >
    Bespoke and custom software is reviewed prior to being released into production or to customers, to identify and correct potential coding vulnerabilities, as follows:
    - Code reviews ensure code is developed according to secure coding guidelines.
    - Code reviews look for both existing and emerging software vulnerabilities.
    - Appropriate corrections are implemented prior to release.
  "6.2.3.1": >
    If manual code reviews are performed for bespoke and custom software prior to release to production, code changes are:
    - Reviewed by individuals other than the originating code author, and who are knowledgeable about code-review techniques and secure coding practices.
    - Reviewed and approved by management prior to release.
  "6.2.4": >
    Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software, including but not limited to the following:
    - Injection attacks, including SQL, LDAP, XPath, or other command, parameter, object, fault, or injection-type flaws.
    - Attacks on data and data structures, including attempts to manipulate buffers, pointers, input data, or shared data.
    - Attacks on cryptography usage, including attempts to exploit weak, insecure, or inappropriate cryptographic implementations, algorithms, cipher suites, or modes of operation.
    - Attacks on business logic, including attempts to abuse or bypass application features and functionalities through the manipulation of APIs, communication protocols and channels, client-side functionality, or other system/application functions and resources. This includes cross-site scripting (XSS) and cross-site request forgery (CSRF).
    - Attacks on access control mechanisms, including attempts to bypass or abuse identification, authentication, or authorization mechanisms, or attempts to exploit weaknesses in the implementation of such mechanisms.
    - Attacks via any "high-risk" vulnerabilities identified in the vulnerability identification process, as defined in Requirement 6.3.1.
  "6.3": Security vulnerabilities are identified and addressed.
  "6.3.1": >
    Security vulnerabilities are identified and managed as follows:
    - New security vulnerabilities are identified using industry-recognized sources for security vulnerability information, including alerts from internationalnational computer emergency response teams (CERTs).
    - Vulnerabilities are assigned a risk ranking based on industry best practices and consideration of potential impact.
    - Risk rankings identify, at a minimum, all vulnerabilities considered to be a high-risk or critical to the environment.
    - Vulnerabilities for bespoke and custom, and third-party software (for example operating systems and databases) are covered.
  "6.3.2": >
    An inventory of bespoke and custom software, and third-party software components incorporated into bespoke and custom software is maintained to facilitate vulnerability and patch management.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "6.3.3": >
    All system components are protected from known vulnerabilities by installing applicable security patches/updates as follows:
    - Critical or high-security patches/updates (identified according to the risk ranking process at Requirement 6.3.1) are installed within one month of release.
    - All other applicable security patches/updates are installed within an appropriate time frame as determined by the entity (for example, within three months of release).
  "6.4": Public-facing web applications are protected against attacks.
  "6.4.1": >
    For public-facing web applications, new threats and vulnerabilities are addressed on an ongoing basis and these applications are protected against known attacks as follows:
    - Reviewing public-facing web applications via manual or automated application vulnerability security assessment tools or methods as follows:
    - At least once every 12 months and after significant changes.
    - By an entity that specializes in application security.
    - Including, at a minimum, all common software attacks in Requirement 6.2.4.
    - All vulnerabilities are ranked in accordance with requirement 6.3.1.
    - All vulnerabilities are corrected.
    - The application is re-evaluated after the corrections
    OR
    - Installing an automated technical solution(s) that continually detects and prevents web-based attacks as follows:
    - Installed in front of public-facing web applications to detect and prevent web-based attacks.
    - Actively running and up to date as applicable.
    - Generating audit logs.
    - Configured to either block web-based attacks or generate an alert that is immediately investigated.
    Note: This requirement will be superseded by Requirement 6.4.2 after 31 March 2025 when Requirement 6.4.2 becomes effective.
  "6.4.2": >
    For public-facing web applications, an automated technical solution is deployed that continually detects and prevents web-based attacks, with at least the following:
    - Is installed in front of public-facing web applications and is configured to detect and prevent web-based attacks.
    - Actively running and up to date as applicable.
    - Generating audit logs.
    - Configured to either block web-based attacks or generate an alert that is immediately investigated.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment. This new requirement will replace Requirement 6.4.1 once its effective date is reached.
  "6.4.3": >
    All payment page scripts that are loaded and executed in the consumer's browser are managed as follows:
    - A method is implemented to confirm that each script is authorized.
    - A method is implemented to assure the integrity of each script.
    - An inventory of all scripts is maintained with written justification as to why each is necessary.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "6.5": Changes to all system components are managed securely.
  "6.5.1": >
    Changes to all system components in the production environment are made according to established procedures that include:
    - Reason for, and description of, the change.
    - Documentation of security impact.
    - Documented change approval by authorized parties.
    - Testing to verify that the change does not adversely impact system security.
    - For bespoke and custom software changes, all updates are tested for compliance with Requirement 6.2.4 before being deployed into production.
    - Procedures to address failures and return to a secure state.
  "6.5.2": Upon completion of a significant change, all applicable PCI DSS requirements are confirmed to be in place on all new or changed systems and networks, and documentation is updated as applicable.
  "6.5.3": Pre-production environments are separated from production environments and the separation is enforced with access controls.
  "6.5.4": Roles and functions are separated between production and pre-production environments to provide accountability such that only reviewed and approved changes are deployed.
  "6.5.5": Live PANs are not used in pre-production environments, except where those environments are included in the CDE and protected in accordance with all applicable PCI DSS requirements.
  "6.5.6": Test data and test accounts are removed from system components before the system goes into production.
  "7": Restrict Access to System Components and Cardholder Data by Business Need to Know
  "7.1": Processes and mechanisms for restricting access to system components and cardholder data by business need to know are defined and understood.
  "7.1.1": >
    All security policies and operational procedures that are identified in Requirement 7 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "7.1.2": Roles and responsibilities for performing activities in Requirement 7 are documented, assigned, and understood.
  "7.2": Access to system components and data is appropriately defined and assigned.
  "7.2.1": >
    An access control model is defined and includes granting access as follows:
    - Appropriate access depending on the entity's business and access needs.
    - Access to system components and data resources that is based on users' job classification and functions.
    - The least privileges required (for example, user, administrator) to perform a job function.
  "7.2.2": >
    Access is assigned to users, including privileged users, based on:
    - Job classification and function.
    - Least privileges necessary to perform job responsibilities.
  "7.2.3": Required privileges are approved by authorized personnel.
  "7.2.4": >
    All user accounts and related access privileges, including third-party/vendor accounts, are reviewed as follows:
    - At least once every six months.
    - To ensure user accounts and access remain appropriate based on job function.
    - Any inappropriate access is addressed.
    - Management acknowledges that access remains appropriate.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "7.2.5": >
    All application and system accounts and related access privileges are assigned and managed as follows:
    - Based on the least privileges necessary for the operability of the system or application.
    - Access is limited to the systems, applications, or processes that specifically require their use.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "7.2.5.1": >
    All access by application and system accounts and related access privileges are reviewed as follows:
    - Periodically (at the frequency defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1).
    - The application/system access remains appropriate for the function being performed.
    - Any inappropriate access is addressed.
    - Management acknowledges that access remains appropriate.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "7.2.6": >
    All user access to query repositories of stored cardholder data is restricted as follows:
    - Via applications or other programmatic methods, with access and allowed actions based on user roles and least privileges.
    - Only the responsible administrator(s) can directly access or query repositories of stored CHD.
  "7.3": Access to system components and data is managed via an access control system(s).
  "7.3.1": An access control system(s) is in place that restricts access based on a user's need to know and covers all system components.
  "7.3.2": The access control system(s) is configured to enforce permissions assigned to individuals, applications, and systems based on job classification and function.
  "7.3.3": The access control system(s) is set to \u201cdeny all\u201d by default.
  "8": Identify Users and Authenticate Access to System Components
  "8.1": Processes and mechanisms for identifying users and authenticating access to system components are defined and understood.
  "8.1.1": >
    All security policies and operational procedures that are identified in Requirement 8 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "8.1.2": Roles and responsibilities for performing activities in Requirement 8 are documented, assigned, and understood.
  "8.2": User identification and related accounts for users and administrators are strictly managed throughout an account's lifecycle.
  "8.2.1": All users are assigned a unique ID before access to system components or cardholder data is allowed.
  "8.2.2": >
    Group, shared, or generic accounts, or other shared authentication credentials are only used when necessary on an exception basis, and are managed as follows:
    - Account use is prevented unless needed for an exceptional circumstance.
    - Use is limited to the time needed for the exceptional circumstance.
    - Business justification for use is documented.
    - Use is explicitly approved by management.
    - Individual user identity is confirmed before access to an account is granted.
    - Every action taken is attributable to an individual user.
  "8.2.3": >
    Additional requirement for service providers only: Service providers with remote access to customer premises use unique authentication factors for each customer premises.
  "8.2.4": >
    Addition, deletion, and modification of user IDs, authentication factors, and other identifier objects are managed as follows:
    - Authorized with the appropriate approval.
    - Implemented with only the privileges specified on the documented approval.
  "8.2.5": Access for terminated users is immediately revoked.
  "8.2.6": Inactive user accounts are removed or disabled within 90 days of inactivity.
  "8.2.7": >
    Accounts used by third parties to access, support, or maintain system components via remote access are managed as follows:
    - Enabled only during the time period needed and disabled when not in use.
    - Use is monitored for unexpected activity.
  "8.2.8": If a user session has been idle for more than 15 minutes, the user is required to re-authenticate to re-activate the terminal or session.
  "8.3": Strong authentication for users and administrators is established and managed.
  "8.3.1": >
    All user access to system components for users and administrators is authenticated via at least one of the following authentication factors:
    - Something you know, such as a password or passphrase.
    - Something you have, such as a token device or smart card.
    - Something you are, such as a biometric element.
  "8.3.2": Strong cryptography is used to render all authentication factors unreadable during transmission and storage on all system components.
  "8.3.3": User identity is verified before modifying any authentication factor.
  "8.3.4": >
    Invalid authentication attempts are limited by:
    - Locking out the user ID after not more than 10 attempts.
    - Setting the lockout duration to a minimum of 30 minutes or until the user's identity is confirmed.
  "8.3.5": >
    If passwords/passphrases are used as authentication factors to meet Requirement 8.3.1, they are set and reset for each user as follows:
    - Set to a unique value for first-time use and upon reset.
    - Forced to be changed immediately after the first use.
  "8.3.6": >
    If passwords/passphrases are used as authentication factors to meet Requirement 8.3.1, they meet the following minimum level of complexity:
    - A minimum length of 12 characters (or IF the system does not support 12 characters, a minimum length of eight characters).
    - Contain both numeric and alphabetic characters.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment. Until 31 March 2025, passwords must be a minimum length of seven characters in accordance with PCI DSS v3.2.1 Requirement 8.2.3.
  "8.3.7": Individuals are not allowed to submit a new password/passphrase that is the same as any of the last four passwords/passphrases used.
  "8.3.8": >
    Authentication policies and procedures are documented and communicated to all users including:
    - Guidance on selecting strong authentication factors.
    - Guidance for how users should protect their authentication factors.
    - Instructions not to reuse previously used passwords/passphrases.
    - Instructions to change passwords/passphrases if there is any suspicion or knowledge that the password/passphrases have been compromised and how to report the incident.
  "8.3.9": >
    If passwords/passphrases are used as the only authentication factor for user access (i.e., in any single-factor authentication implementation) then either:
    - Passwords/passphrases are changed at least once every 90 days,
    OR
    - The security posture of accounts is dynamically analyzed, and real-time access to resources is automatically determined accordingly.
  "8.3.10": >
    Additional requirement for service providers only: If passwords/passphrases are used as the only authentication factor for customer user access to cardholder data (i.e., in any single-factor authentication implementation), then guidance is provided to customer users including:
    - Guidance for customers to change their user passwords/passphrases periodically.
    - Guidance as to when, and under what circumstances, passwords/passphrases are to be changed.
    Note: This requirement for service providers will be superseded by Requirement 8.3.10.1 as of 31 March 2025.
  "8.3.10.1": >
    Additional requirement for service providers only: If passwords/passphrases are used as the only authentication factor for customer user access (i.e., in any single-factor authentication implementation) then either:
    - Passwords/passphrases are changed at least once every 90 days,
    OR
    - The security posture of accounts is dynamically analyzed, and real-time access to resources is automatically determined accordingly.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment. Until this requirement is effective on 31 March 2025, service providers may meet either Requirement 8.3.10 or 8.3.10.1.
  "8.3.11": >
    Where authentication factors such as physical or logical security tokens, smart cards, or certificates are used:
    - Factors are assigned to an individual user and not shared among multiple users.
    - Physical and/or logical controls ensure only the intended user can use that factor to gain access.
  "8.4": Multi-factor authentication (MFA) is implemented to secure access into the CDE.
  "8.4.1": MFA is implemented for all non-console access into the CDE for personnel with administrative access.
  "8.4.2": >
    MFA is implemented for all access into the CDE.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "8.4.3": >
    MFA is implemented for all remote network access originating from outside the entity's network that could access or impact the CDE as follows:
    - All remote access by all personnel, both users and administrators, originating from outside the entity's network.
    - All remote access by third parties and vendors.
  "8.5": Multi-factor authentication (MFA) systems are configured to prevent misuse.
  "8.5.1": >
    MFA systems are implemented as follows:
    - The MFA system is not susceptible to replay attacks.
    - MFA systems cannot be bypassed by any users, including administrative users unless specifically documented, and authorized by management on an exception basis, for a limited time period.
    - At least two different types of authentication factors are used.
    - Success of all authentication factors is required before access is granted.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "8.6": Use of application and system accounts and associated authentication factors is strictly managed.
  "8.6.1": >
    If accounts used by systems or applications can be used for interactive login, they are managed as follows:
    - Interactive use is prevented unless needed for an exceptional circumstance.
    - Interactive use is limited to the time needed for the exceptional circumstance.
    - Business justification for interactive use is documented.
    - Interactive use is explicitly approved by management.
    - Individual user identity is confirmed before access to account is granted.
    - Every action taken is attributable to an individual user.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "8.6.2": >
    Passwords/passphrases for any application and system accounts that can be used for interactive login are not hard coded in scripts, configuration/property files, or bespoke and custom source code.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "8.6.3": >
    Passwords/passphrases for any application and system accounts are protected against misuse as follows:
    - Passwords/passphrases are changed periodically (at the frequency defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1) and upon suspicion or confirmation of compromise.
    - Passwords/passphrases are constructed with sufficient complexity appropriate for how frequently the entity changes the passwords/passphrases.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "9": Restrict Physical Access to Cardholder Data
  "9.1": Processes and mechanisms for restricting physical access to cardholder data are defined and understood.
  "9.1.1": >
    All security policies and operational procedures that are identified in Requirement 9 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "9.1.2": Roles and responsibilities for performing activities in Requirement 9 are documented, assigned, and understood.
  "9.2": Physical access controls manage entry into facilities and systems containing cardholder data.
  "9.2.1": Appropriate facility entry controls are in place to restrict physical access to systems in the CDE.
  "9.2.1.1": >
    Individual physical access to sensitive areas within the CDE is monitored with either video cameras or physical access control mechanisms (or both) as follows:
    - Entry and exit points to/from sensitive areas within the CDE are monitored.
    - Monitoring devices or mechanisms are protected from tampering or disabling.
    - Collected data is reviewed and correlated with other entries.
    - Collected data is stored for at least three months, unless otherwise restricted by law.
  "9.2.2": Physical and/or logical controls are implemented to restrict use of publicly accessible network jacks within the facility.
  "9.2.3": Physical access to wireless access points, gateways, networking/communications hardware, and telecommunication lines within the facility is restricted.
  "9.2.4": Access to consoles in sensitive areas is restricted via locking when not in use.
  "9.3": Physical access for personnel and visitors is authorized and managed.
  "9.3.1": >
    Procedures are implemented for authorizing and managing physical access of personnel to the CDE, including:
    - Identifying personnel.
    - Managing changes to an individual's physical access requirements.
    - Revoking or terminating personnel identification.
    - Limiting access to the identification process or system to authorized personnel.
  "9.3.1.1": >
    Physical access to sensitive areas within the CDE for personnel is controlled as follows:
    - Access is authorized and based on individual job function.
    - Access is revoked immediately upon termination.
    - All physical access mechanisms, such as keys, access cards, etc., are returned or disabled upon termination.
  "9.3.2": >
    Procedures are implemented for authorizing and managing visitor access to the CDE, including:
    - Visitors are authorized before entering.
    - Visitors are escorted at all times.
    - Visitors are clearly identified and given a badge or other identification that expires.
    - Visitor badges or other identification visibly distinguishes visitors from personnel.
  "9.3.3": Visitor badges or identification are surrendered or deactivated before visitors leave the facility or at the date of expiration.
  "9.3.4": >
    A visitor log is used to maintain a physical record of visitor activity within the facility and within sensitive areas, including:
    - The visitor's name and the organization represented.
    - The date and time of the visit.
    - The name of the personnel authorizing physical access.
    - Retaining the log for at least three months, unless otherwise restricted by law.
  "9.4": Media with cardholder data is securely stored, accessed, distributed, and destroyed.
  "9.4.1": All media with cardholder data is physically secured.
  "9.4.1.1": Offline media backups with cardholder data are stored in a secure location.
  "9.4.1.2": The security of the offline media backup location(s) with cardholder data is reviewed at least once every 12 months.
  "9.4.2": All media with cardholder data is classified in accordance with the sensitivity of the data.
  "9.4.3": >
    Media with cardholder data sent outside the facility is secured as follows:
    - Media sent outside the facility is logged.
    - Media is sent by secured courier or other delivery method that can be accurately tracked.
    - Offsite tracking logs include details about media location.
  "9.4.4": Management approves all media with cardholder data that is moved outside the facility (including when media is distributed to individuals).
  "9.4.5": Inventory logs of all electronic media with cardholder data are maintained.
  "9.4.5.1": Inventories of electronic media with cardholder data are conducted at least once every 12 months.
  "9.4.6": >
    Hard-copy materials with cardholder data are destroyed when no longer needed for business or legal reasons, as follows:
    - Materials are cross-cut shredded, incinerated, or pulped so that cardholder data cannot be reconstructed.
    - Materials are stored in secure storage containers prior to destruction.
  "9.4.7": >
    Electronic media with cardholder data is destroyed when no longer needed for business or legal reasons via one of the following:
    - The electronic media is destroyed.
    - The cardholder data is rendered unrecoverable so that it cannot be reconstructed.
  "9.5": Point-of-interaction (POI) devices are protected from tampering and unauthorized substitution.
  "9.5.1": >
    POI devices that capture payment card data via direct physical interaction with the payment card form factor are protected from tampering and unauthorized substitution, including the following:
    - Maintaining a list of POI devices.
    - Periodically inspecting POI devices to look for tampering or unauthorized substitution.
    - Training personnel to be aware of suspicious behavior and to report tampering or unauthorized substitution of devices.
  "9.5.1.1": >
    An up-to-date list of POI devices is maintained, including:
    - Make and model of the device.
    - Location of device.
    - Device serial number or other methods of unique identification.
  "9.5.1.2": >
    POI device surfaces are periodically inspected to detect tampering and unauthorized substitution.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "9.5.1.2.1": The frequency of periodic POI device inspections and the type of inspections performed is defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1.
  "9.5.1.3": >
    Training is provided for personnel in POI environments to be aware of attempted tampering or replacement of POI devices, and includes:
    - Verifying the identity of any third-party persons claiming to be repair or maintenance personnel, before granting them access to modify or troubleshoot devices.
    - Procedures to ensure devices are not installed, replaced, or returned without verification.
    - Being aware of suspicious behavior around devices.
    - Reporting suspicious behavior and indications of device tampering or substitution to appropriate personnel.
  "10": Log and Monitor All Access to System Components and Cardholder Data
  "10.1": Processes and mechanisms for logging and monitoring all access to system components and cardholder data are defined and documented.
  "10.1.1": >
    All security policies and operational procedures that are identified in Requirement 10 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "10.1.2": Roles and responsibilities for performing activities in Requirement 10 are documented, assigned, and understood.
  "10.2": Audit logs are implemented to support the detection of anomalies and suspicious activity, and the forensic analysis of events.
  "10.2.1": Interview the system administrator and examine system configurations to verify that audit logs are enabled and active for all system components.
  "10.2.1.1": Audit logs capture all individual user access to cardholder data.
  "10.2.1.2": Audit logs capture all actions taken by any individual with administrative access, including any interactive use of application or system accounts.
  "10.2.1.3": Audit logs capture all access to audit logs.
  "10.2.1.4": Audit logs capture all invalid logical access attempts.
  "10.2.1.5": >
    Audit logs capture all changes to identification and authentication credentials including, but not limited to:
    - Creation of new accounts.
    - Elevation of privileges.
    - All changes, additions, or deletions to accounts with administrative access.
  "10.2.1.6": >
    Audit logs capture the following:
    - All initialization of new audit logs, and
    - All starting, stopping, or pausing of the existing audit logs.
  "10.2.1.7": Audit logs capture all creation and deletion of system-level objects.
  "10.2.2": >
    Audit logs record the following details for each auditable event:
    - User identification.
    - Type of event.
    - Date and time.
    - Success and failure indication.
    - Origination of event.
    - Identity or name of affected data, system component, resource, or service (for example, name and protocol).
  "10.3": Audit logs are protected from destruction and unauthorized modifications.
  "10.3.1": Read access to audit logs files is limited to those with a job-related need.
  "10.3.2": Audit log files are protected to prevent modifications by individuals.
  "10.3.3": Audit log files, including those for external-facing technologies, are promptly backed up to a secure, central, internal log server(s) or other media that is difficult to modify.
  "10.3.4": File integrity monitoring or change-detection mechanisms is used on audit logs to ensure that existing log data cannot be changed without generating alerts.
  "10.4": Audit logs are reviewed to identify anomalies or suspicious activity.
  "10.4.1": >
    The following audit logs are reviewed at least once daily:
    - All security events.
    - Logs of all system components that store, process, or transmit CHD and/or SAD.
    - Logs of all critical system components.
    - Logs of all servers and system components that perform security functions (for example, network security controls, intrusion-detection systems/intrusion-prevention systems (IDS/IPS), authentication servers).
  "10.4.1.1": >
    Automated mechanisms are used to perform audit log reviews.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "10.4.2": Logs of all other system components (those not specified in Requirement 10.4.1) are reviewed periodically.
  "10.4.2.1": >
    The frequency of periodic log reviews for all other system components (not defined in Requirement 10.4.1) is defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "10.4.3": Exceptions and anomalies identified during the review process are addressed.
  "10.5": Audit log history is retained and available for analysis.
  "10.5.1": Retain audit log history for at least 12 months, with at least the most recent three months immediately available for analysis.
  "10.6": Time-synchronization mechanisms support consistent time settings across all systems.
  "10.6.1": System clocks and time are synchronized using time-synchronization technology.
  "10.6.2": >
    Systems are configured to the correct and consistent time as follows:
    - One or more designated time servers are in use.
    - Only the designated central time server(s) receives time from external sources.
    - Time received from external sources is based on International Atomic Time or Coordinated Universal Time (UTC).
    - The designated time server(s) accept time updates only from specific industry-accepted external sources.
    - Where there is more than one designated time server, the time servers peer with one another to keep accurate time.
    - Internal systems receive time information only from designated central time server(s).
  "10.6.3": >
    Time synchronization settings and data are protected as follows:
    - Access to time data is restricted to only personnel with a business need.
    - Any changes to time settings on critical systems are logged, monitored, and reviewed.
  "10.7": Failures of critical security control systems are detected, reported, and responded to promptly.
  "10.7.1": >
    Additional requirement for service providers only: Failures of critical security control systems are detected, alerted, and addressed promptly, including but not limited to failure of the following critical security control systems:
    - Network security controls.
    - IDS/IPS.
    - FIM.
    - Anti-malware solutions.
    - Physical access controls.
    - Logical access controls.
    - Audit logging mechanisms.
    - Segmentation controls (if used).
    Note: This requirement will be superseded by Requirement 10.7.2 as of 31 March 2025.
  "10.7.2": >
    Failures of critical security control systems are detected, alerted, and addressed promptly, including but not limited to failure of the following critical security control systems:
    - Network security controls.
    - IDS/IPS.
    - Change-detection mechanisms.
    - Anti-malware solutions.
    - Physical access controls.
    - Logical access controls.
    - Audit logging mechanisms.
    - Segmentation controls (if used).
    - Audit log review mechanisms.
    - Automated security testing tools (if used).
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment and will supersede Requirement 10.7.1.
  "10.7.3": >
    Failures of any critical security controls systems are responded to promptly, including but not limited to:
    - Restoring security functions.
    - Identifying and documenting the duration (date and time from start to end) of the security failure.
    - Identifying and documenting the cause(s) of failure and documenting required remediation.
    - Identifying and addressing any security issues that arose during the failure.
    - Determining whether further actions are required as a result of the security failure.
    - Implementing controls to prevent the cause of failure from reoccurring.
    - Resuming monitoring of security controls.
    Note: This is a current v3.2.1 requirement that applies to service providers only. However, this requirement is a best practice for all other entities until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "11": Test Security of Systems and Networks Regularly
  "11.1": Processes and mechanisms for regularly testing security of systems and networks are defined and understood.
  "11.1.1": >
    All security policies and operational procedures that are identified in Requirement 11 are:
    - Documented.
    - Kept up to date.
    - In use.
    - Known to all affected parties.
  "11.1.2": Roles and responsibilities for performing activities in Requirement 11 are documented, assigned, and understood.
  "11.2": Wireless access points are identified and monitored, and unauthorized wireless access points are addressed.
  "11.2.1": >
    Authorized and unauthorized wireless access points are managed as follows:
    - The presence of wireless (Wi-Fi) access points is tested for,
    - All authorized and unauthorized wireless access points are detected and identified,
    - Testing, detection, and identification occurs at least once every three months.
    - If automated monitoring is used, personnel are notified via generated alerts.
  "11.2.2": An inventory of authorized wireless access points is maintained, including a documented business justification.
  "11.3": External and internal vulnerabilities are regularly identified, prioritized, and addressed.
  "11.3.1": >
    Internal vulnerability scans are performed as follows:
    - At least once every three months.
    - High-risk and critical vulnerabilities (per the entity's vulnerability risk rankings defined at Requirement 6.3.1) are resolved.
    - Rescans are performed that confirm all high-risk and critical vulnerabilities (as noted above) have been resolved.
    - Scan tool is kept up to date with latest vulnerability information.
    - Scans are performed by qualified personnel and organizational independence of the tester exists.
  "11.3.1.1": >
    All other applicable vulnerabilities (those not ranked as high-risk or critical per the entity's vulnerability risk rankings defined at Requirement 6.3.1) are managed as follows:
    - Addressed based on the risk defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1.
    - Rescans are conducted as needed.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "11.3.1.2": >
    Internal vulnerability scans are performed via authenticated scanning as follows:
    - Systems that are unable to accept credentials for authenticated scanning are documented.
    - Sufficient privileges are used for those systems that accept credentials for scanning.
    - If accounts used for authenticated scanning can be used for interactive login, they are managed in accordance with Requirement 8.2.2.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "11.3.1.3": >
    Internal vulnerability scans are performed after any significant change as follows:
    - High-risk and critical vulnerabilities (per the entity's vulnerability risk rankings defined at Requirement 6.3.1) are resolved.
    - Rescans are conducted as needed.
    - Scans are performed by qualified personnel and organizational independence of the tester exists (not required to be a QSA or ASV).
  "11.3.2": >
    External vulnerability scans are performed as follows:
    - At least once every three months.
    - By PCI SSC Approved Scanning Vendor (ASV).
    - Vulnerabilities are resolved and ASV Program Guide requirements for a passing scan are met.
    - Rescans are performed as needed to confirm that vulnerabilities are resolved per the ASV Program Guide requirements for a passing scan.
  "11.3.2.1": >
    External vulnerability scans are performed after any significant change as follows:
    - Vulnerabilities that are scored 4.0 or higher by the CVSS are resolved.
    - Rescans are conducted as needed.
    - Scans are performed by qualified personnel and organizational independence of the tester exists (not required to be a QSA or ASV).
  "11.4": External and internal penetration testing is regularly performed, and exploitable vulnerabilities and security weaknesses are corrected.
  "11.4.1": >
    A penetration testing methodology is defined, documented, and implemented by the entity and includes:
    - Industry-accepted penetration testing approaches.
    - Coverage for the entire CDE perimeter and critical systems.
    - Testing from both inside and outside the network.
    - Testing to validate any segmentation and scope-reduction controls.
    - Application-layer penetration testing to identify, at a minimum, the vulnerabilities listed in Requirement 6.2.4.
    - Network-layer penetration tests that encompass all components that support network functions as well as operating systems.
    - Review and consideration of threats and vulnerabilities experienced in the last 12 months.
    - Documented approach to assessing and addressing the risk posed by exploitable vulnerabilities and security weaknesses found during penetration testing.
    - Retention of penetration testing results and remediation activities results for at least 12 months.
  "11.4.2": >
    Internal penetration testing is performed:
    - Per the entity's defined methodology
    - At least once every 12 months
    - After any significant infrastructure or application upgrade or change
    - By a qualified internal resource or qualified external third-party
    - Organizational independence of the tester exists (not required to be a QSA or ASV)
  "11.4.3": >
    External penetration testing is performed:
    - Per the entity's defined methodology
    - At least once every 12 months
    - After any significant infrastructure or application upgrade or change
    - By a qualified internal resource or qualified external third party
    - Organizational independence of the tester exists (not required to be a QSA or ASV)
  "11.4.4": >
    Exploitable vulnerabilities and security weaknesses found during penetration testing are corrected as follows:
    - In accordance with the entity's assessment of the risk posed by the security issue as defined in Requirement 6.3.1.
    - Penetration testing is repeated to verify the corrections.
  "11.4.5": >
    If segmentation is used to isolate the CDE from other networks, penetration tests are performed on segmentation controls as follows:
    - At least once every 12 months and after any changes to segmentation controls/methods
    - Covering all segmentation controls/methods in use
    - According to the entity's defined penetration testing methodology
    - Confirming that the segmentation controls/methods are operational and effective, and isolate the CDE from all out-of-scope systems
    - Confirming effectiveness of any use of isolation to separate systems with differing security levels (see Requirement 2.2.3)
    - Performed by a qualified internal resource or qualified external third party
    - Organizational independence of the tester exists (not required to be a QSA or ASV)
  "11.4.6": >
    Additional requirement for service providers only: If segmentation is used to isolate the CDE from other networks, penetration tests are performed on segmentation controls as follows:
    - At least once every six months and after any changes to segmentation controls/methods.
    - Covering all segmentation controls/methods in use.
    - According to the entity's defined penetration testing methodology.
    - Confirming that the segmentation controls/methods are operational and effective, and isolate the CDE from all out-of-scope systems.
    - Confirming effectiveness of any use of isolation to separate systems with differing security levels (see Requirement 2.2.3).
    - Performed by a qualified internal resource or qualified external third party.
    - Organizational independence of the tester exists (not required to be a QSA or ASV).
  "11.4.7": >
    Additional requirement for multi-tenant service providers only: Multi-tenant service providers support their customers for external penetration testing per Requirement 11.4.3 and 11.4.4.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "11.5": Network intrusions and unexpected file changes are detected and responded to.
  "11.5.1": >
    Intrusion-detection and/or intrusion-prevention techniques are used to detect and/or prevent intrusions into the network as follows:
    - All traffic is monitored at the perimeter of the CDE.
    - All traffic is monitored at critical points in the CDE.
    - Personnel are alerted to suspected compromises.
    - All intrusion-detection and prevention engines, baselines, and signatures are kept up to date.
  "11.5.1.1": >
    Additional requirement for service providers only: Intrusion-detection and/or intrusion-prevention techniques detect, alert on/prevent, and address covert malware communication channels.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "11.5.2": >
    A change-detection mechanism (for example, file integrity monitoring tools) is deployed as follows:
    - To alert personnel to unauthorized modification (including changes, additions, and deletions) of critical files.
    - To perform critical file comparisons at least once weekly.
  "11.6": Unauthorized changes on payment pages are detected and responded to.
  "11.6.1": >
    A change- and tamper-detection mechanism is deployed as follows:
    - To alert personnel to unauthorized modification (including indicators of compromise, changes, additions, and deletions) to the HTTP headers and the contents of payment pages as received by the consumer browser.
    - The mechanism is configured to evaluate the received HTTP header and payment page.
    - The mechanism functions are performed as follows:
    - At least once every seven days
    OR
    - Periodically (at the frequency defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1).
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12": Support Information Security with Organizational Policies and Programs
  "12.1": A comprehensive information security policy that governs and provides direction for protection of the entity's information assets is known and current.
  "12.1.1": >
    An overall information security policy is:
    - Established.
    - Published.
    - Maintained.
    - Disseminated to all relevant personnel, as well as to relevant vendors and business partners.
  "12.1.2": >
    The information security policy is:
    - Reviewed at least once every 12 months.
    - Updated as needed to reflect changes to business objectives or risks to the environment.
  "12.1.3": The security policy clearly defines information security roles and responsibilities for all personnel, and all personnel are aware of and acknowledge their information security responsibilities.
  "12.1.4": Responsibility for information security is formally assigned to a Chief Information Security Officer or other information security knowledgeable member of executive management.
  "12.2": Acceptable use policies for end-user technologies are defined and implemented.
  "12.2.1": >
    Acceptable use policies for end-user technologies are documented and implemented, including:
    - Explicit approval by authorized parties.
    - Acceptable uses of the technology.
    - List of products approved by the company for employee use, including hardware and software.
  "12.3": Risks to the cardholder data environment are formally identified, evaluated, and managed.
  "12.3.1": >
    Each PCI DSS requirement that provides flexibility for how frequently it is performed (for example, requirements to be performed periodically) is supported by a targeted risk analysis that is documented and includes:
    - Identification of the assets being protected.
    - Identification of the threat(s) that the requirement is protecting against.
    - Identification of factors that contribute to the likelihood and/or impact of a threat being realized.
    - Resulting analysis that determines, and includes justification for, how frequently the requirement must be performed to minimize the likelihood of the threat being realized.
    - Review of each targeted risk analysis at least once every 12 months to determine whether the results are still valid or if an updated risk analysis is needed.
    - Performance of updated risk analyses when needed, as determined by the annual review.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.3.2": >
    A targeted risk analysis is performed for each PCI DSS requirement that the entity meets with the customized approach, to include:
    - Documented evidence detailing each element specified in Appendix D: Customized Approach (including, at a minimum, a controls matrix and risk analysis).
    - Approval of documented evidence by senior management.
    - Performance of the targeted analysis of risk at least once every 12 months.
  "12.3.3": >
    Cryptographic cipher suites and protocols in use are documented and reviewed at least once every 12 months, including at least the following:
    - An up-to-date inventory of all cryptographic cipher suites and protocols in use, including purpose and where used.
    - Active monitoring of industry trends regarding continued viability of all cryptographic cipher suites and protocols in use.
    - A documented strategy to respond to anticipated changes in cryptographic vulnerabilities.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.3.4": >
    Hardware and software technologies in use are reviewed at least once every 12 months, including at least the following:
    - Analysis that the technologies continue to receive security fixes from vendors promptly.
    - Analysis that the technologies continue to support (and do not preclude) the entity's PCI DSS compliance.
    - Documentation of any industry announcements or trends related to a technology, such as when a vendor has announced \u201cend of life\u201d plans for a technology.
    - Documentation of a plan, approved by senior management, to remediate outdated technologies, including those for which vendors have announced \u201cend of life\u201d plans.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.4": PCI DSS compliance is managed.
  "12.4.1": >
    Additional requirement for service providers only: Responsibility is established by executive management for the protection of cardholder data and a PCI DSS compliance program to include:
    - Overall accountability for maintaining PCI DSS compliance.
    - Defining a charter for a PCI DSS compliance program and communication to executive management.
  "12.4.2": >
    Additional requirement for service providers only: Reviews are performed at least once every three months to confirm that personnel are performing their tasks in accordance with all security policies and operational procedures. Reviews are performed by personnel other than those responsible for performing the given task and include, but are not limited to, the following tasks:
    - Daily log reviews.
    - Configuration reviews for network security controls.
    - Applying configuration standards to new systems.
    - Responding to security alerts.
    - Change-management processes.
  "12.4.2.1": >
    Additional requirement for service providers only: Reviews conducted in accordance with Requirement 12.4.2 are documented to include:
    - Results of the reviews.
    - Documented remediation actions taken for any tasks that were found to not be performed at Requirement 12.4.2.
    - Review and sign-off of results by personnel assigned responsibility for the PCI DSS compliance program.
  "12.5": PCI DSS scope is documented and validated.
  "12.5.1": An inventory of system components that are in scope for PCI DSS, including a description of function/use, is maintained and kept current.
  "12.5.2": >
    PCI DSS scope is documented and confirmed by the entity at least once every 12 months and upon significant change to the in-scope environment. At a minimum, the scoping validation includes:
    - Identifying all data flows for the various payment stages (for example, authorization, capture settlement, chargebacks, and refunds) and acceptance channels (for example, card-present, card-not-present, and e-commerce).
    - Updating all data-flow diagrams per Requirement 1.2.4.
    - Identifying all locations where account data is stored, processed, and transmitted, including but not limited to: 1) any locations outside of the currently defined CDE, 2) applications that process CHD, 3) transmissions between systems and networks, and 4) file backups.
    - Identifying all system components in the CDE, connected to the CDE, or that could impact security of the CDE.
    - Identifying all segmentation controls in use and the environment(s) from which the CDE is segmented, including justification for environments being out of scope.
    - Identifying all connections from third-party entities with access to the CDE.
    - Confirming that all identified data flows, account data, system components, segmentation controls, and connections from third parties with access to the CDE are included in scope.
  "12.5.2.1": >
    Additional requirement for service providers only: PCI DSS scope is documented and confirmed by the entity at least once every six months and upon significant change to the in-scope environment. At a minimum, the scoping validation includes all the elements specified in Requirement 12.5.2.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.5.3": >
    Additional requirement for service providers only: Significant changes to organizational structure result in a documented (internal) review of the impact to PCI DSS scope and applicability of controls, with results communicated to executive management.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.6": Security awareness education is an ongoing activity.
  "12.6.1": A formal security awareness program is implemented to make all personnel aware of the entity's information security policy and procedures, and their role in protecting the cardholder data.
  "12.6.2": >
    The security awareness program is:
    - Reviewed at least once every 12 months, and
    - Updated as needed to address any new threats and vulnerabilities that may impact the security of the entity's CDE, or the information provided to personnel about their role in protecting cardholder data.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.6.3": >
    Personnel receive security awareness training as follows:
    - Upon hire and at least once every 12 months.
    - Multiple methods of communication are used.
    - Personnel acknowledge at least once every 12 months that they have read and understood the information security policy and procedures.
  "12.6.3.1": >
    Security awareness training includes awareness of threats and vulnerabilities that could impact the security of the CDE, including but not limited to:
    - Phishing and related attacks.
    - Social engineering.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.6.3.2": >
    Security awareness training includes awareness about the acceptable use of end-user technologies in accordance with Requirement 12.2.1.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.7": Personnel are screened to reduce risks from insider threats.
  "12.7.1": Potential personnel who will have access to the CDE are screened, within the constraints of local laws, prior to hire to minimize the risk of attacks from internal sources.
  "12.8": Risk to information assets associated with third-party service provider (TPSP) relationships is managed.
  "12.8.1": A list of all third-party service providers (TPSPs) with which account data is shared or that could affect the security of account data is maintained, including a description for each of the services provided.
  "12.8.2": >
    Written agreements with TPSPs are maintained as follows:
    - Written agreements are maintained with all TPSPs with which account data is shared or that could affect the security of the CDE.
    - Written agreements include acknowledgments from TPSPs that they are responsible for the security of account data the TPSPs possess or otherwise store, process, or transmit on behalf of the entity, or to the extent that they could impact the security of the entity's CDE.
  "12.8.3": An established process is implemented for engaging TPSPs, including proper due diligence prior to engagement.
  "12.8.4": A program is implemented to monitor TPSPs' PCI DSS compliance status at least once every 12 months.
  "12.8.5": Information is maintained about which PCI DSS requirements are managed by each TPSP, which are managed by the entity, and any that are shared between the TPSP and the entity.
  "12.9": Third-party service providers (TPSPs) support their customers' PCI DSS compliance.
  "12.9.1": >
    Additional requirement for service providers only: TPSPs acknowledge in writing to customers that they are responsible for the security of account data the TPSP possesses or otherwise stores, processes, or transmits on behalf of the customer, or to the extent that they could impact the security of the customer's CDE.
  "12.9.2": >
    Additional requirement for service providers only: TPSPs support their customers' requests for information to meet Requirements 12.8.4 and 12.8.5 by providing the following upon customer request:
    - PCI DSS compliance status information for any service the TPSP performs on behalf of customers (Requirement 12.8.4).
    - Information about which PCI DSS requirements are the responsibility of the TPSP and which are the responsibility of the customer, including any shared responsibilities (Requirement 12.8.5)
  "12.10": Suspected and confirmed security incidents that could impact the CDE are responded to immediately.
  "12.10.1": >
    An incident response plan exists and is ready to be activated in the event of a suspected or confirmed security incident. The plan includes, but is not limited to:
    - Roles, responsibilities, and communication and contact strategies in the event of a suspected or confirmed security incident, including notification of payment brands and acquirers, at a minimum.
    - Incident response procedures with specific containment and mitigation activities for different types of incidents.
    - Business recovery and continuity procedures.
    - Data backup processes.
    - Analysis of legal requirements for reporting compromises.
    - Coverage and responses of all critical system components.
    - Reference or inclusion of incident response procedures from the payment brands.
  "12.10.2": >
    At least once every 12 months, the security incident response plan is:
    - Reviewed and the content is updated as needed.
    - Tested, including all elements listed in Requirement 12.10.1.
  "12.10.3": Specific personnel are designated to be available on a 24/7 basis to respond to suspected or confirmed security incidents.
  "12.10.4": Personnel responsible for responding to suspected and confirmed security incidents are appropriately and periodically trained on their incident response responsibilities.
  "12.10.4.1": >
    The frequency of periodic training for incident response personnel is defined in the entity's targeted risk analysis, which is performed according to all elements specified in Requirement 12.3.1.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "12.10.5": >
    The security incident response plan includes monitoring and responding to alerts from security monitoring systems, including but not limited to:
    - Intrusion-detection and intrusion-prevention systems.
    - Network security controls.
    - Change-detection mechanisms for critical files.
    - The change-and tamper-detection mechanism for payment pages. This bullet is a best practice until 31 March 2025, after which it will be required as part of Requirement 12.10.5 and must be fully considered during a PCI DSS assessment.
    - Detection of unauthorized wireless access points.
  "12.10.6": The security incident response plan is modified and evolved according to lessons learned and to incorporate industry developments.
  "12.10.7": >
    Incident response procedures are in place, to be initiated upon the detection of stored PAN anywhere it is not expected, and include:
    - Determining what to do if PAN is discovered outside the CDE, including its retrieval, secure deletion, and/or migration into the currently defined CDE, as applicable.
    - Identifying whether sensitive authentication data is stored with PAN.
    - Determining where the account data came from and how it ended up where it was not expected.
    - Remediating data leaks or process gaps that resulted in the account data being where it was not expected.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "A1": Additional PCI DSS Requirements for Multi-Tenant Service Providers
  "A1.1": Multi-tenant service providers protect and separate all customer environments and data.
  "A1.1.1": >
    Logical separation is implemented as follows:
    - The provider cannot access its customers' environments without authorization.
    - Customers cannot access the provider's environment without authorization.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "A1.1.2": Controls are implemented such that each customer only has permission to access its own cardholder data and CDE.
  "A1.1.3": Controls are implemented such that each customer can only access resources allocated to them.
  "A1.1.4": >
    The effectiveness of logical separation controls used to separate customer environments is confirmed at least once every six months via penetration testing.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "A1.2": Multi-tenant service providers facilitate logging and incident response for all customers.
  "A1.2.1": >
    Audit log capability is enabled for each customer's environment that is consistent with PCI DSS Requirement 10, including:
    - Logs are enabled for common third-party applications.
    - Logs are active by default.
    - Logs are available for review only by the owning customer.
    - Log locations are clearly communicated to the owning customer.
    - Log data and availability is consistent with PCI DSS Requirement 10.
  "A1.2.2": Processes or mechanisms are implemented to support and/or facilitate prompt forensic investigations in the event of a suspected or confirmed security incident for any customer.
  "A1.2.3": >
    Processes or mechanisms are implemented for reporting and addressing suspected or confirmed security incidents and vulnerabilities, including:
    - Customers can securely report security incidents and vulnerabilities to the provider.
    - The provider addresses and remediates suspected or confirmed security incidents and vulnerabilities according to Requirement 6.3.1.
    Note: This requirement is a best practice until 31 March 2025, after which it will be required and must be fully considered during a PCI DSS assessment.
  "A2": Additional PCI DSS Requirements for Entities Using SSL/Early TLS for Card-Present POS POI Terminal Connections
  "A2.1": POI terminals using SSL and/or early TLS are confirmed as not susceptible to known SSL/TLS exploits.
  "A2.1.1": Where POS POI terminals at the merchant or payment acceptance location use SSL and/or early TLS, the entity confirms the devices are not susceptible to any known exploits for those protocols.
  "A2.1.2": >
    Additional requirement for service providers only: All service providers with existing connection points to POS POI terminals that use SSL and/or early TLS as defined in A2.1 have a formal Risk Mitigation and Migration Plan in place that includes:
    - Description of usage, including what data is being transmitted, types and number of systems that use and/or support SSL/early TLS, and type of environment.
    - Risk-assessment results and risk-reduction controls in place.
    - Description of processes to monitor for new vulnerabilities associated with SSL/early TLS.
    - Description of change control processes that are implemented to ensure SSL/early TLS is not implemented into new environments.
    - Overview of migration project plan to replace SSL/early TLS at a future date.
  "A2.1.3": >
    Additional requirement for service providers only: All service providers provide a secure service offering.
  "A3": Designated Entities Supplemental Validation (DESV)

"MITRE ATT&CK":
  version: 11.2
  tactics_base_url: https://attack.mitre.org/tactics/
  tactics:
    - id: TA0043
      name: Reconnaissance
      description: >
        The adversary is trying to gather information they can use to plan future operations.
    - id: TA0042
      name: Resource Development
      description: >
        The adversary is trying to establish resources they can use to support operations.
    - id: TA0001
      name: Initial Access
      description: >
        The adversary is trying to get into your network.
    - id: TA0002
      name: Execution
      description: >
        The adversary is trying to run malicious code.
    - id: TA0003
      name: Persistence
      description: >
        The adversary is trying to maintain their foothold.
    - id: TA0004
      name: Privilege Escalation
      description: >
        The adversary is trying to gain higher-level permissions.
    - id: TA0005
      name: Defense Evasion
      description: >
        The adversary is trying to avoid being detected.
    - id: TA0006
      name: Credential Access
      description: >
        The adversary is trying to steal account names and passwords.
    - id: TA0007
      name: Discovery
      description: >
        The adversary is trying to figure out your environment.
    - id: TA0008
      name: Lateral Movement
      description: >
        The adversary is trying to move through your environment.
    - id: TA0009
      name: Collection
      description: >
        The adversary is trying to gather data of interest to their goal.
    - id: TA0011
      name: Command and Control
      description: >
        The adversary is trying to communicate with compromised systems to control them.
    - id: TA0010
      name: Exfiltration
      description: >
        The adversary is trying to steal data.
    - id: TA0040
      name: Impact
      description: >
        The adversary is trying to manipulate, interrupt, or destroy your systems and data.

  mitigations_base_url: https://attack.mitre.org/mitigations/
  mitigations:
    - id: M1036
      name: Account Use Policies
      description: >
        Configure features related to account use like login attempt lockouts, specific login times, etc.
    - id: M1015
      name: Active Directory Configuration
      description: >
        Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.
    - id: M1049
      name: Antivirus/Antimalware
      description: >
        Use signatures or heuristics to detect malicious software.
    - id: M1013
      name: Application Developer Guidance
      description: >
        This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.
    - id: M1048
      name: Application Isolation and Sandboxing
      description: >
        Restrict execution of code to a virtual environment on or in transit to an endpoint system.
    - id: M1047
      name: Audit
      description: >
        Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.
    - id: M1040
      name: Behavior Prevention on Endpoint
      description: >
        Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.
    - id: M1046
      name: Boot Integrity
      description: >
        Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.
    - id: M1045
      name: Code Signing
      description: >
        Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.
    - id: M1043
      name: Credential Access Protection
      description: >
        Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.
    - id: M1053
      name: Data Backup
      description: >
        Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.
    - id: M1057
      name: Data Loss Prevention
      description: >
        Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.
    - id: M1042
      name: Disable or Remove Feature or Program
      description: >
        Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.
    - id: M1055
      name: Do Not Mitigate
      description: >
        This category is to associate techniques that mitigation might increase risk of compromise and therefore mitigation is not recommended.
    - id: M1041
      name: Encrypt Sensitive Information
      description: >
        Protect sensitive information with strong encryption.
    - id: M1039
      name: Environment Variable Permissions
      description: >
        Prevent modification of environment variables by unauthorized users and groups.
    - id: M1038
      name: Execution Prevention
      description: >
        Block execution of code on a system through application control, and/or script blocking.
    - id: M1050
      name: Exploit Protection
      description: >
        Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.
    - id: M1037
      name: Filter Network Traffic
      description: >
        Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.
    - id: M1035
      name: Limit Access to Resource Over Network
      description: >
        Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.
    - id: M1034
      name: Limit Hardware Installation
      description: >
        Block users or groups from installing or using unapproved hardware on systems, including USB devices.
    - id: M1033
      name: Limit Software Installation
      description: >
        Block users or groups from installing unapproved software.
    - id: M1032
      name: Multi-factor Authentication
      description: >
        Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.
    - id: M1031
      name: Network Intrusion Prevention
      description: >
        Use intrusion detection signatures to block traffic at network boundaries.
    - id: M1030
      name: Network Segmentation
      description: >
        Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.
    - id: M1028
      name: Operating System Configuration
      description: >
        Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.
    - id: M1027
      name: Password Policies
      description: >
        Set and enforce secure password policies for accounts.
    - id: M1056
      name: Pre-compromise
      description: >
        This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.
    - id: M1026
      name: Privileged Account Management
      description: >
        Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.
    - id: M1025
      name: Privileged Process Integrity
      description: >
        Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.
    - id: M1029
      name: Remote Data Storage
      description: >
        Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.
    - id: M1022
      name: Restrict File and Directory Permissions
      description: >
        Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.
    - id: M1044
      name: Restrict Library Loading
      description: >
        Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.
    - id: M1024
      name: Restrict Registry Permissions
      description: >
        Restrict the ability to modify certain hives or keys in the Windows Registry.
    - id: M1021
      name: Restrict Web-Based Content
      description: >
        Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.
    - id: M1054
      name: Software Configuration
      description: >
        Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.
    - id: M1020
      name: SSL/TLS Inspection
      description: >
        Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.
    - id: M1019
      name: Threat Intelligence Program
      description: >
        A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.
    - id: M1051
      name: Update Software
      description: >
        Perform regular software updates to mitigate exploitation risk.
    - id: M1052
      name: User Account Control
      description: >
        Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.
    - id: M1018
      name: User Account Management
      description: >
        Manage the creation, modification, use, and permissions associated to user accounts.
    - id: M1017
      name: User Training
      description: >
        Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.
    - id: M1016
      name: Vulnerability Scanning
      description: >
        Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.

  data_sources_base_url: https://attack.mitre.org/datasources/
  data_sources:
    - id: DS0026
      name: Active Directory
      description: >
        A database and set of services that allows administrators to manage permissions, access to network resources, and stored data objects (user, group, application, or devices)
    - id: DS0015
      name: Application Log
      description: >
        Events collected by third-party services such as mail servers, web applications, or other appliances (not by the native OS or platform)
    - id: DS0037
      name: Certificate
      description: >
        A digital document, which highlights information such as the owner's identity, used to instill trust in public keys used while encrypting network communications
    - id: DS0025
      name: Cloud Service
      description: >
        Infrastructure, platforms, or software that are hosted on-premise or by third-party providers, made available to users through network connections and/or APIs
    - id: DS0010
      name: Cloud Storage
      description: >
        Data object storage infrastructure hosted on-premise or by third-party providers, made available to users through network connections and/or APIs
    - id: DS0031
      name: Cluster
      description: >
        A set of containerized computing resources that are managed together but have separate nodes to execute various tasks and/or applications
    - id: DS0017
      name: Command
      description: >
        A directive given to a computer program, acting as an interpreter of some kind, in order to perform a specific task
    - id: DS0032
      name: Container
      description: >
        A standard unit of virtualized software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another
    - id: DS0038
      name: Domain Name
      description: >
        Information obtained (commonly through registration or activity logs) regarding one or more IP addresses registered with human readable names (ex: mitre.org)
    - id: DS0016
      name: Drive
      description: >
        A non-volatile data storage device (hard drive, floppy disk, USB flash drive) with at least one formatted partition, typically mounted to the file system and/or assigned a drive letter
    - id: DS0027
      name: Driver
      description: >
        A computer program that operates or controls a particular type of device that is attached to a computer. Provides a software interface to hardware devices, enabling operating systems and other computer programs to access hardware functions without needing to know precise details about the hardware being used
    - id: DS0022
      name: File
      description: >
        A computer resource object, managed by the I/O system, for storing data (such as images, text, videos, computer programs, or any wide variety of other media).
    - id: DS0018
      name: Firewall
      description: >
        A network security system, running locally on an endpoint or remotely as a service (ex: cloud environment), that monitors and controls incoming/outgoing network traffic based on predefined rules
    - id: DS0001
      name: Firmware
      description: >
        Computer software that provides low-level control for the hardware and device(s) of a host, such as BIOS or UEFI/EFI
    - id: DS0036
      name: Group
      description: >
        A collection of multiple user accounts that share the same access rights to the computer and/or network resources and have common security rights
    - id: DS0007
      name: Image
      description: >
        A single file used to deploy a virtual machine/bootable disk into an on-premise or third-party cloud environment
    - id: DS0030
      name: Instance
      description: >
        A virtual server environment which runs workloads, hosted on-premise or by third-party cloud providers
    - id: DS0035
      name: Internet Scan
      description: >
        Information obtained (commonly via active network traffic probes or web crawling) regarding various types of resources and servers connected to the public Internet
    - id: DS0008
      name: Kernel
      description: >
        A computer program, at the core of a computer OS, that resides in memory and facilitates interactions between hardware and software components
    - id: DS0028
      name: Logon Session
      description: >
        Logon occurring on a system or resource (local, domain, or cloud) to which a user/device is gaining access after successful authentication and authorization
    - id: DS0004
      name: Malware Repository
      description: >
        Information obtained (via shared or submitted samples) regarding malicious software (droppers, backdoors, etc.) used by adversaries
    - id: DS0011
      name: Module
      description: >
        Executable files consisting of one or more shared classes and interfaces, such as portable executable (PE) format binaries/dynamic link libraries (DLL), executable and linkable format (ELF) binaries/shared libraries, and Mach-O format binaries/shared libraries
    - id: DS0023
      name: Named Pipe
      description: >
        Mechanisms that allow inter-process communication locally or over the network. A named pipe is usually found as a file and processes attach to it
    - id: DS0033
      name: Network Share
      description: >
        A storage resource (typically a folder or drive) made available from one host to others using network protocols, such as Server Message Block (SMB) or Network File System (NFS)
    - id: DS0029
      name: Network Traffic
      description: >
        Data transmitted across a network (ex: Web, DNS, Mail, File, etc.), that is either summarized (ex: Netflow) and/or captured as raw data in an analyzable format (ex: PCAP)
    - id: DS0040
      name: Operational Databases
      description: >
        Operational databases contain information about the status of the operational process and associated devices, including any measurements, events, history, or alarms that have occurred
    - id: DS0021
      name: Persona
      description: >
        A malicious online profile representing a user commonly used by adversaries to social engineer or otherwise target victims
    - id: DS0014
      name: Pod
      description: >
        A single unit of shared resources within a cluster, comprised of one or more containers
    - id: DS0009
      name: Process
      description: >
        Instances of computer programs that are being executed by at least one thread. Processes have memory space for process executables, loaded modules (DLLs or shared libraries), and allocated memory regions containing everything from user input to application-specific data structures
    - id: DS0003
      name: Scheduled Job
      description: >
        Automated tasks that can be executed at a specific time or on a recurring schedule running in the background (ex: Cron daemon, task scheduler, BITS)
    - id: DS0012
      name: Script
      description: >
        A file or stream containing a list of commands, allowing them to be launched in sequence
    - id: DS0013
      name: Sensor Health
      description: >
        Information from host telemetry providing insights about system status, errors, or other notable functional activity
    - id: DS0019
      name: Service
      description: >
        A computer process that is configured to execute continuously in the background and perform system tasks, in some cases before any user has logged in
    - id: DS0020
      name: Snapshot
      description: >
        A point-in-time copy of cloud volumes (files, settings, etc.) that can be created and/or deployed in cloud environments
    - id: DS0002
      name: User Account
      description: >
        A profile representing a user, device, service, or application used to authenticate and access resources
    - id: DS0034
      name: Volume
      description: >
        Block object storage hosted on-premise or by third-party providers, typically made available to resources as virtualized hard drives
    - id: DS0006
      name: Web Credential
      description: >
        Credential material, such as session cookies or tokens, used to authenticate to web applications and services
    - id: DS0024
      name: Windows Registry
      description: >
        A Windows OS hierarchical database that stores much of the information and settings for software programs, hardware devices, user preferences, and operating-system configurations
    - id: DS0005
      name: WMI
      description: >
        The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers

  techniques_base_url: https://attack.mitre.org/techniques/
  techniques:
    - id: T1548
      name: Abuse Elevation Control Mechanism
      description: >
        Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.
      sub_techniques:
        - id: "001"
          name: Setuid and Setgid
          description: >
            An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.
        - id: "002"
          name: Bypass User Account Control
          description: >
            Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.
        - id: "003"
          name: Sudo and Sudo Caching
          description: >
            Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.
        - id: "004"
          name: Elevated Execution with Prompt
          description: >
            Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified.
    - id: T1134
      name: Access Token Manipulation
      description: >
        Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.
      sub_techniques:
        - id: "001"
          name: Token Impersonation/Theft
          description: >
            Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.
        - id: "002"
          name: Create Process with Token
          description: >
            Adversaries may create a new process with a different token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.
        - id: "003"
          name: Make and Impersonate Token
          description: >
            Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.
        - id: "004"
          name: Parent PID Spoofing
          description: >
            Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context.
        - id: "005"
          name: SID-History Injection
          description: >
            Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).
    - id: T1531
      name: Account Access Removal
      description: >
        Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.
    - id: T1087
      name: Account Discovery
      description: >
        Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.
      sub_techniques:
        - id: "001"
          name: Local Account
          description: >
            Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.
        - id: "002"
          name: Domain Account
          description: >
            Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.
        - id: "003"
          name: Email Account
          description: >
            Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).
        - id: "004"
          name: Cloud Account
          description: >
            Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.
    - id: T1098
      name: Account Manipulation
      description: >
        Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.
      sub_techniques:
        - id: "001"
          name: Additional Cloud Credentials
          description: >
            Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.
        - id: "002"
          name: Additional Email Delegate Permissions
          description: >
            Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account.
        - id: "003"
          name: Additional Cloud Roles
          description: >
            An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, they may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins).
        - id: "004"
          name: SSH Authorized Keys
          description: >
            Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value "yes" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.
        - id: "005"
          name: Device Registration
          description: >
            Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.
    - id: T1583
      name: Acquire Infrastructure
      description: >
        Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.
      sub_techniques:
        - id: "001"
          name: Domains
          description: >
            Adversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.
        - id: "002"
          name: DNS Server
          description: >
            Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.
        - id: "003"
          name: Virtual Private Server
          description: >
            Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.
        - id: "004"
          name: Server
          description: >
            Adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations.
        - id: "005"
          name: Botnet
          description: >
            Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).
        - id: "006"
          name: Web Services
          description: >
            Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.
    - id: T1595
      name: Active Scanning
      description: >
        Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.
      sub_techniques:
        - id: "001"
          name: Scanning IP Blocks
          description: >
            Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.
        - id: "002"
          name: Vulnerability Scanning
          description: >
            Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.
        - id: "003"
          name: Wordlist Scanning
          description: >
            Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).
    - id: T1557
      name: Adversary-in-the-Middle
      description: >
        Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.
      sub_techniques:
        - id: "001"
          name: LLMNR/NBT-NS Poisoning and SMB Relay
          description: >
            By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials.
        - id: "002"
          name: ARP Cache Poisoning
          description: >
            Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.
        - id: "003"
          name: DHCP Spoofing
          description: >
            Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.
    - id: T1071
      name: Application Layer Protocol
      description: >
        Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
      sub_techniques:
        - id: "001"
          name: Web Protocols
          description: >
            Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
        - id: "002"
          name: File Transfer Protocols
          description: >
            Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
        - id: "003"
          name: Mail Protocols
          description: >
            Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
        - id: "004"
          name: DNS
          description: >
            Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
    - id: T1010
      name: Application Window Discovery
      description: >
        Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.
    - id: T1560
      name: Archive Collected Data
      description: >
        An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.
      sub_techniques:
        - id: "001"
          name: Archive via Utility
          description: >
            Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.
        - id: "002"
          name: Archive via Library
          description: >
            An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile , libzip , and zlib . Most libraries include functionality to encrypt and/or compress data.
        - id: "003"
          name: Archive via Custom Method
          description: >
            An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.
    - id: T1123
      name: Audio Capture
      description: >
        An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.
    - id: T1119
      name: Automated Collection
      description: >
        Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools.
    - id: T1020
      name: Automated Exfiltration
      description: >
        Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection.
      sub_techniques:
        - id: "001"
          name: Traffic Duplication
          description: >
            Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure. Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.
    - id: T1197
      name: BITS Jobs
      description: >
        Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.
    - id: T1547
      name: Boot or Logon Autostart Execution
      description: >
        Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.
      sub_techniques:
        - id: "001"
          name: Registry Run Keys / Startup Folder
          description: >
            Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.
        - id: "002"
          name: Authentication Package
          description: >
            Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.
        - id: "003"
          name: Time Providers
          description: >
            Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.
        - id: "004"
          name: Winlogon Helper DLL
          description: >
            Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software[\Wow6432Node\]\Microsoft\Windows NT\CurrentVersion\Winlogon\ and HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\ are used to manage additional helper programs and functionalities that support Winlogon.
        - id: "005"
          name: Security Support Provider
          description: >
            Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.
        - id: "006"
          name: Kernel Modules and Extensions
          description: >
            Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.
        - id: "007"
          name: Re-opened Applications
          description: >
            Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to "Reopen windows when logging back in". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user’s next logon.
        - id: "008"
          name: LSASS Driver
          description: >
            Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.
        - id: "009"
          name: Shortcut Modification
          description: >
            Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.
        - id: "010"
          name: Port Monitors
          description: >
            Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\Windows\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors.
        - id: "012"
          name: Print Processors
          description: >
            Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot.
        - id: "013"
          name: XDG Autostart Entries
          description: >
            Adversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension.
        - id: "014"
          name: Active Setup
          description: >
            Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.
        - id: "015"
          name: Login Items
          description: >
            Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.
    - id: T1037
      name: Boot or Logon Initialization Scripts
      description: >
        Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.
      sub_techniques:
        - id: "001"
          name: Logon Script (Windows)
          description: >
            Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\Environment\UserInitMprLogonScript Registry key.
        - id: "002"
          name: Login Hook
          description: >
            Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks.
        - id: "003"
          name: Network Logon Script
          description: >
            Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.
        - id: "004"
          name: RC Scripts
          description: >
            Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.
        - id: "005"
          name: Startup Items
          description: >
            Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.
    - id: T1217
      name: Browser Bookmark Discovery
      description: >
        Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.
    - id: T1176
      name: Browser Extensions
      description: >
        Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.
    - id: T1185
      name: Browser Session Hijacking
      description: >
        Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.
    - id: T1110
      name: Brute Force
      description: >
        Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.
      sub_techniques:
        - id: "001"
          name: Password Guessing
          description: >
            Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.
        - id: "002"
          name: Password Cracking
          description: >
            Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices.
        - id: "003"
          name: Password Spraying
          description: >
            Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.
        - id: "004"
          name: Credential Stuffing
          description: >
            Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.
    - id: T1612
      name: Build Image on Host
      description: >
        Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.
    - id: T1115
      name: Clipboard Data
      description: >
        Adversaries may collect data stored in the clipboard from users copying information within or between applications.
    - id: T1580
      name: Cloud Infrastructure Discovery
      description: >
        An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.
    - id: T1538
      name: Cloud Service Dashboard
      description: >
        An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.
    - id: T1526
      name: Cloud Service Discovery
      description: >
        An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc.
    - id: T1619
      name: Cloud Storage Object Discovery
      description: >
        Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.
    - id: T1059
      name: Command and Scripting Interpreter
      description: >
        Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.
      sub_techniques:
        - id: "001"
          name: PowerShell
          description: >
            Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).
        - id: "002"
          name: AppleScript
          description: >
            Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.
        - id: "003"
          name: Windows Command Shell
          description: >
            Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.
        - id: "004"
          name: Unix Shell
          description: >
            Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.
        - id: "005"
          name: Visual Basic
          description: >
            Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.
        - id: "006"
          name: Python
          description: >
            Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.
        - id: "007"
          name: JavaScript
          description: >
            Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.
        - id: "008"
          name: Network Device CLI
          description: >
            Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands.
    - id: T1092
      name: Communication Through Removable Media
      description: >
        Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.
    - id: T1586
      name: Compromise Accounts
      description: >
        Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.
      sub_techniques:
        - id: "001"
          name: Social Media Accounts
          description: >
            Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona.
        - id: "002"
          name: Email Accounts
          description: >
            Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).
    - id: T1554
      name: Compromise Client Software Binary
      description: >
        Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.
    - id: T1584
      name: Compromise Infrastructure
      description: >
        Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.
      sub_techniques:
        - id: "001"
          name: Domains
          description: >
            Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant. Adversaries may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.
        - id: "002"
          name: DNS Server
          description: >
            Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.
        - id: "003"
          name: Virtual Private Server
          description: >
            Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.
        - id: "004"
          name: Server
          description: >
            Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.
        - id: "005"
          name: Botnet
          description: >
            Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. Instead of purchasing/renting a botnet from a booter/stresser service, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).
        - id: "006"
          name: Web Services
          description: >
            Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.
    - id: T1609
      name: Container Administration Command
      description: >
        Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.
    - id: T1613
      name: Container and Resource Discovery
      description: >
        Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.
    - id: T1136
      name: Create Account
      description: >
        Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.
      sub_techniques:
        - id: "001"
          name: Local Account
          description: >
            Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account.
        - id: "002"
          name: Domain Account
          description: >
            Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.
        - id: "003"
          name: Cloud Account
          description: >
            Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.
    - id: T1543
      name: Create or Modify System Process
      description: >
        Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters.
      sub_techniques:
        - id: "001"
          name: Launch Agent
          description: >
            Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents. Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.
        - id: "002"
          name: Systemd Service
          description: >
            Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.
        - id: "003"
          name: Windows Service
          description: >
            Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.
        - id: "004"
          name: Launch Daemon
          description: >
            Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.
    - id: T1555
      name: Credentials from Password Stores
      description: >
        Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.
      sub_techniques:
        - id: "001"
          name: Keychain
          description: >
            Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service.
        - id: "002"
          name: Securityd Memory
          description: >
            An adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.
        - id: "003"
          name: Credentials from Web Browsers
          description: >
            Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.
        - id: "004"
          name: Windows Credential Manager
          description: >
            Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).
        - id: "005"
          name: Password Managers
          description: >
            Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.
    - id: T1485
      name: Data Destruction
      description: >
        Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.
    - id: T1132
      name: Data Encoding
      description: >
        Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.
      sub_techniques:
        - id: "001"
          name: Standard Encoding
          description: >
            Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.
        - id: "002"
          name: Non-Standard Encoding
          description: >
            Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.
    - id: T1486
      name: Data Encrypted for Impact
      description: >
        Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.
    - id: T1530
      name: Data from Cloud Storage Object
      description: >
        Adversaries may access data objects from improperly secured cloud storage.
    - id: T1602
      name: Data from Configuration Repository
      description: >
        Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.
      sub_techniques:
        - id: "001"
          name: SNMP (MIB Dump)
          description: >
            Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).
        - id: "002"
          name: Network Device Configuration Dump
          description: >
            Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.
    - id: T1213
      name: Data from Information Repositories
      description: >
        Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization.
      sub_techniques:
        - id: "001"
          name: Confluence
          description: >
            Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:
        - id: "002"
          name: Sharepoint
          description: >
            Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:
        - id: "003"
          name: Code Repositories
          description: >
            Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.
    - id: T1005
      name: Data from Local System
      description: >
        Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.
    - id: T1039
      name: Data from Network Shared Drive
      description: >
        Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.
    - id: T1025
      name: Data from Removable Media
      description: >
        Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.
    - id: T1565
      name: Data Manipulation
      description: >
        Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.
      sub_techniques:
        - id: "001"
          name: Stored Data Manipulation
          description: >
            Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
        - id: "002"
          name: Transmitted Data Manipulation
          description: >
            Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
        - id: "003"
          name: Runtime Data Manipulation
          description: >
            Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.
    - id: T1001
      name: Data Obfuscation
      description: >
        Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.
      sub_techniques:
        - id: "001"
          name: Junk Data
          description: >
            Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.
        - id: "002"
          name: Steganography
          description: >
            Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.
        - id: "003"
          name: Protocol Impersonation
          description: >
            Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.
    - id: T1074
      name: Data Staged
      description: >
        Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
      sub_techniques:
        - id: "001"
          name: Local Data Staging
          description: >
            Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
        - id: "002"
          name: Remote Data Staging
          description: >
            Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.
    - id: T1030
      name: Data Transfer Size Limits
      description: >
        An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.
    - id: T1622
      name: Debugger Evasion
      description: >
        Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.
    - id: T1491
      name: Defacement
      description: >
        Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.
      sub_techniques:
        - id: "001"
          name: Internal Defacement
          description: >
            An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper. Disturbing or offensive images may be used as a part of Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.
        - id: "002"
          name: External Defacement
          description: >
            An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system’s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda. External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as Drive-by Compromise.
    - id: T1140
      name: Deobfuscate/Decode Files or Information
      description: >
        Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.
    - id: T1610
      name: Deploy Container
      description: >
        Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.
    - id: T1587
      name: Develop Capabilities
      description: >
        Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.
      sub_techniques:
        - id: "001"
          name: Malware
          description: >
            Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.
        - id: "002"
          name: Code Signing Certificates
          description: >
            Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.
        - id: "003"
          name: Digital Certificates
          description: >
            Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).
        - id: "004"
          name: Exploits
          description: >
            Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits. Adversaries may use information acquired via Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.
    - id: T1006
      name: Direct Volume Access
      description: >
        Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.
    - id: T1561
      name: Disk Wipe
      description: >
        Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.
      sub_techniques:
        - id: "001"
          name: Disk Content Wipe
          description: >
            Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.
        - id: "002"
          name: Disk Structure Wipe
          description: >
            Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources.
    - id: T1484
      name: Domain Policy Modification
      description: >
        Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.
      sub_techniques:
        - id: "001"
          name: Group Policy Modification
          description: >
            Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path \<DOMAIN>\SYSVOL\<DOMAIN>\Policies\.
        - id: "002"
          name: Domain Trust Modification
          description: >
            Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.
    - id: T1482
      name: Domain Trust Discovery
      description: >
        Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.
    - id: T1189
      name: Drive-by Compromise
      description: >
        Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.
    - id: T1568
      name: Dynamic Resolution
      description: >
        Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.
      sub_techniques:
        - id: "001"
          name: Fast Flux DNS
          description: >
            Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.
        - id: "002"
          name: Domain Generation Algorithms
          description: >
            Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.
        - id: "003"
          name: DNS Calculation
          description: >
            Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.
    - id: T1114
      name: Email Collection
      description: >
        Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.
      sub_techniques:
        - id: "001"
          name: Local Email Collection
          description: >
            Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.
        - id: "002"
          name: Remote Email Collection
          description: >
            Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.
        - id: "003"
          name: Email Forwarding Rule
          description: >
            Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations. Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators. Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.
    - id: T1573
      name: Encrypted Channel
      description: >
        Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.
      sub_techniques:
        - id: "001"
          name: Symmetric Cryptography
          description: >
            Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.
        - id: "002"
          name: Asymmetric Cryptography
          description: >
            Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.
    - id: T1499
      name: Endpoint Denial of Service
      description: >
        Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.
      sub_techniques:
        - id: "001"
          name: OS Exhaustion Flood
          description: >
            Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.
        - id: "002"
          name: Service Exhaustion Flood
          description: >
            Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.
        - id: "003"
          name: Application Exhaustion Flood
          description: >
            Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.
        - id: "004"
          name: Application or System Exploitation
          description: >
            Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.
    - id: T1611
      name: Escape to Host
      description: >
        Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.
    - id: T1585
      name: Establish Accounts
      description: >
        Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.
      sub_techniques:
        - id: "001"
          name: Social Media Accounts
          description: >
            Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.
        - id: "002"
          name: Email Accounts
          description: >
            Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Adversaries may also take steps to cultivate a persona around the email account, such as through use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: Domains).
    - id: T1546
      name: Event Triggered Execution
      description: >
        Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries.
      sub_techniques:
        - id: "001"
          name: Change Default File Association
          description: >
            Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.
        - id: "002"
          name: Screensaver
          description: >
            Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\Windows\System32\, and C:\Windows\sysWOW64\ on 64-bit Windows systems, along with screensavers included with base Windows installations.
        - id: "003"
          name: Windows Management Instrumentation Event Subscription
          description: >
            Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user logging, or the computer's uptime.
        - id: "004"
          name: Unix Shell Configuration Modification
          description: >
            Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.
        - id: "005"
          name: Trap
          description: >
            Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.
        - id: "006"
          name: LC_LOAD_DYLIB Addition
          description: >
            Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.
        - id: "007"
          name: Netsh Helper DLL
          description: >
            Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\SOFTWARE\Microsoft\Netsh.
        - id: "008"
          name: Accessibility Features
          description: >
            Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.
        - id: "009"
          name: AppCert DLLs
          description: >
            Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec.
        - id: "010"
          name: AppInit DLLs
          description: >
            Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows or HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.
        - id: "011"
          name: Application Shimming
          description: >
            Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.
        - id: "012"
          name: Image File Execution Options Injection
          description: >
            Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C:\dbg\ntsd.exe -g notepad.exe).
        - id: "013"
          name: PowerShell Profile
          description: >
            Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.
        - id: "014"
          name: Emond
          description: >
            Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.
        - id: "015"
          name: Component Object Model Hijacking
          description: >
            Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system. References to various COM objects are stored in the Registry.
    - id: T1480
      name: Execution Guardrails
      description: >
        Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.
      sub_techniques:
        - id: "001"
          name: Environmental Keying
          description: >
            Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.
    - id: T1048
      name: Exfiltration Over Alternative Protocol
      description: >
        Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
      sub_techniques:
        - id: "001"
          name: Exfiltration Over Symmetric Encrypted Non-C2 Protocol
          description: >
            Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
        - id: "002"
          name: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol
          description: >
            Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
        - id: "003"
          name: Exfiltration Over Unencrypted Non-C2 Protocol
          description: >
            Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.
    - id: T1041
      name: Exfiltration Over C2 Channel
      description: >
        Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.
    - id: T1011
      name: Exfiltration Over Other Network Medium
      description: >
        Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.
      sub_techniques:
        - id: "001"
          name: Exfiltration Over Bluetooth
          description: >
            Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.
    - id: T1052
      name: Exfiltration Over Physical Medium
      description: >
        Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.
      sub_techniques:
        - id: "001"
          name: Exfiltration over USB
          description: >
            Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.
    - id: T1567
      name: Exfiltration Over Web Service
      description: >
        Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.
      sub_techniques:
        - id: "001"
          name: Exfiltration to Code Repository
          description: >
            Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.
        - id: "002"
          name: Exfiltration to Cloud Storage
          description: >
            Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.
    - id: T1190
      name: Exploit Public-Facing Application
      description: >
        Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include Exploitation for Defense Evasion.
    - id: T1203
      name: Exploitation for Client Execution
      description: >
        Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.
    - id: T1212
      name: Exploitation for Credential Access
      description: >
        Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.
    - id: T1211
      name: Exploitation for Defense Evasion
      description: >
        Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.
    - id: T1068
      name: Exploitation for Privilege Escalation
      description: >
        Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.
    - id: T1210
      name: Exploitation of Remote Services
      description: >
        Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.
    - id: T1133
      name: External Remote Services
      description: >
        Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.
    - id: T1008
      name: Fallback Channels
      description: >
        Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.
    - id: T1083
      name: File and Directory Discovery
      description: >
        Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
    - id: T1222
      name: File and Directory Permissions Modification
      description: >
        Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
      sub_techniques:
        - id: "001"
          name: Windows File and Directory Permissions Modification
          description: >
            Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
        - id: "002"
          name: Linux and Mac File and Directory Permissions Modification
          description: >
            Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).
    - id: T1495
      name: Firmware Corruption
      description: >
        Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.
    - id: T1187
      name: Forced Authentication
      description: >
        Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.
    - id: T1606
      name: Forge Web Credentials
      description: >
        Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.
      sub_techniques:
        - id: "001"
          name: Web Cookies
          description: >
            Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.
        - id: "002"
          name: SAML Tokens
          description: >
            An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.
    - id: T1592
      name: Gather Victim Host Information
      description: >
        Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).
      sub_techniques:
        - id: "001"
          name: Hardware
          description: >
            Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).
        - id: "002"
          name: Software
          description: >
            Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEM, etc.).
        - id: "003"
          name: Firmware
          description: >
            Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).
        - id: "004"
          name: Client Configurations
          description: >
            Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.
    - id: T1589
      name: Gather Victim Identity Information
      description: >
        Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.
      sub_techniques:
        - id: "001"
          name: Credentials
          description: >
            Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.
        - id: "002"
          name: Email Addresses
          description: >
            Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.
        - id: "003"
          name: Employee Names
          description: >
            Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.
    - id: T1590
      name: Gather Victim Network Information
      description: >
        Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.
      sub_techniques:
        - id: "001"
          name: Domain Properties
          description: >
            Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.
        - id: "002"
          name: DNS
          description: >
            Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.
        - id: "003"
          name: Network Trust Dependencies
          description: >
            Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.
        - id: "004"
          name: Network Topology
          description: >
            Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.
        - id: "005"
          name: IP Addresses
          description: >
            Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.
        - id: "006"
          name: Network Security Appliances
          description: >
            Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.
    - id: T1591
      name: Gather Victim Org Information
      description: >
        Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.
      sub_techniques:
        - id: "001"
          name: Determine Physical Locations
          description: >
            Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.
        - id: "002"
          name: Business Relationships
          description: >
            Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources.
        - id: "003"
          name: Identify Business Tempo
          description: >
            Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources.
        - id: "004"
          name: Identify Roles
          description: >
            Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.
    - id: T1615
      name: Group Policy Discovery
      description: >
        Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path \\SYSVOL\\Policies\.
    - id: T1200
      name: Hardware Additions
      description: >
        Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.
    - id: T1564
      name: Hide Artifacts
      description: >
        Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.
      sub_techniques:
        - id: "001"
          name: Hidden Files and Directories
          description: >
            Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).
        - id: "002"
          name: Hidden Users
          description: >
            Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users.
        - id: "003"
          name: Hidden Window
          description: >
            Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.
        - id: "004"
          name: NTFS File Attributes
          description: >
            Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).
        - id: "005"
          name: Hidden File System
          description: >
            Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.
        - id: "006"
          name: Run Virtual Instance
          description: >
            Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.
        - id: "007"
          name: VBA Stomping
          description: >
            Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.
        - id: "008"
          name: Email Hiding Rules
          description: >
            Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.
        - id: "009"
          name: Resource Forking
          description: >
            Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file’s extended attributes, using ls -l@ or xattr -l commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the /Resources folder.
        - id: "010"
          name: Process Argument Spoofing
          description: >
            Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.
    - id: T1574
      name: Hijack Execution Flow
      description: >
        Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.
      sub_techniques:
        - id: "001"
          name: DLL Search Order Hijacking
          description: >
            Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.
        - id: "002"
          name: DLL Side-Loading
          description: >
            Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).
        - id: "004"
          name: Dylib Hijacking
          description: >
            Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable. Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.
        - id: "005"
          name: Executable Installer File Permissions Weakness
          description: >
            Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.
        - id: "006"
          name: Dynamic Linker Hijacking
          description: >
            Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.
        - id: "007"
          name: Path Interception by PATH Environment Variable
          description: >
            Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.
        - id: "008"
          name: Path Interception by Search Order Hijacking
          description: >
            Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.
        - id: "009"
          name: Path Interception by Unquoted Path
          description: >
            Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.
        - id: "010"
          name: Services File Permissions Weakness
          description: >
            Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.
        - id: "011"
          name: Services Registry Permissions Weakness
          description: >
            Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions.
        - id: "012"
          name: COR_PROFILER
          description: >
            Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
        - id: "013"
          name: KernelCallbackTable
          description: >
            Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads. The KernelCallbackTable can be found in the Process Environment Block (PEB) and is initialized to an array of graphic functions available to a GUI process once user32.dll is loaded.
    - id: T1562
      name: Impair Defenses
      description: >
        Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.
      sub_techniques:
        - id: "001"
          name: Disable or Modify Tools
          description: >
            Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.
        - id: "002"
          name: Disable Windows Event Logging
          description: >
            Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.
        - id: "003"
          name: Impair Command History Logging
          description: >
            Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.
        - id: "004"
          name: Disable or Modify System Firewall
          description: >
            Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.
        - id: "006"
          name: Indicator Blocking
          description: >
            An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.
        - id: "007"
          name: Disable or Modify Cloud Firewall
          description: >
            Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall.
        - id: "008"
          name: Disable Cloud Logs
          description: >
            An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection.
        - id: "009"
          name: Safe Mode Boot
          description: >
            Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.
        - id: "010"
          name: Downgrade Attack
          description: >
            Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls such as logging. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.
    - id: T1525
      name: Implant Internal Image
      description: >
        Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.
    - id: T1070
      name: Indicator Removal on Host
      description: >
        Adversaries may delete or modify artifacts generated on a host system to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.
      sub_techniques:
        - id: "001"
          name: Clear Windows Event Logs
          description: >
            Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.
        - id: "002"
          name: Clear Linux or Mac System Logs
          description: >
            Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:
        - id: "003"
          name: Clear Command History
          description: >
            In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.
        - id: "004"
          name: File Deletion
          description: >
            Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.
        - id: "005"
          name: Network Share Connection Removal
          description: >
            Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \system\share /delete command.
        - id: "006"
          name: Timestomp
          description: >
            Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.
    - id: T1202
      name: Indirect Command Execution
      description: >
        Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.
    - id: T1105
      name: Ingress Tool Transfer
      description: >
        Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer).
    - id: T1490
      name: Inhibit System Recovery
      description: >
        Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.
    - id: T1056
      name: Input Capture
      description: >
        Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).
      sub_techniques:
        - id: "001"
          name: Keylogging
          description: >
            Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.
        - id: "002"
          name: GUI Input Capture
          description: >
            Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).
        - id: "003"
          name: Web Portal Capture
          description: >
            Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.
        - id: "004"
          name: Credential API Hooking
          description: >
            Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:
    - id: T1559
      name: Inter-Process Communication
      description: >
        Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern.
      sub_techniques:
        - id: "001"
          name: Component Object Model
          description: >
            Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE). Remote COM execution is facilitated by Remote Services such as Distributed Component Object Model (DCOM).
        - id: "002"
          name: Dynamic Data Exchange
          description: >
            Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.
        - id: "003"
          name: XPC Services
          description: >
            Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.
    - id: T1534
      name: Internal Spearphishing
      description: >
        Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged campaign where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.
    - id: T1570
      name: Lateral Tool Transfer
      description: >
        Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e. Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.
    - id: T1036
      name: Masquerading
      description: >
        Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.
      sub_techniques:
        - id: "001"
          name: Invalid Code Signature
          description: >
            Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.
        - id: "002"
          name: Right-to-Left Override
          description: >
            Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\u202Egnp.js will be displayed as photo_high_resj.png.
        - id: "003"
          name: Rename System Utilities
          description: >
            Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.
        - id: "004"
          name: Masquerade Task or Service
          description: >
            Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.
        - id: "005"
          name: Match Legitimate Name or Location
          description: >
            Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.
        - id: "006"
          name: Space after Filename
          description: >
            Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.
        - id: "007"
          name: Double File Extension
          description: >
            Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies.
    - id: T1556
      name: Modify Authentication Process
      description: >
        Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.
      sub_techniques:
        - id: "001"
          name: Domain Controller Authentication
          description: >
            Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts.
        - id: "002"
          name: Password Filter DLL
          description: >
            Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated.
        - id: "003"
          name: Pluggable Authentication Modules
          description: >
            Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.
        - id: "004"
          name: Network Device Authentication
          description: >
            Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.
        - id: "005"
          name: Reversible Encryption
          description: >
            An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.
    - id: T1578
      name: Modify Cloud Compute Infrastructure
      description: >
        An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.
      sub_techniques:
        - id: "001"
          name: Create Snapshot
          description: >
            An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.
        - id: "002"
          name: Create Cloud Instance
          description: >
            An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.
        - id: "003"
          name: Delete Cloud Instance
          description: >
            An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.
        - id: "004"
          name: Revert Cloud Instance
          description: >
            An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.
    - id: T1112
      name: Modify Registry
      description: >
        Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.
    - id: T1601
      name: Modify System Image
      description: >
        Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.
      sub_techniques:
        - id: "001"
          name: Patch System Image
          description: >
            Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.
        - id: "002"
          name: Downgrade System Image
          description: >
            Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.
    - id: T1111
      name: Multi-Factor Authentication Interception
      description: >
        Adversaries may target multi-factor authentication (MFA) mechanisms, (I.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms.
    - id: T1621
      name: Multi-Factor Authentication Request Generation
      description: >
        Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.
    - id: T1104
      name: Multi-Stage Channels
      description: >
        Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.
    - id: T1106
      name: Native API
      description: >
        Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.
    - id: T1599
      name: Network Boundary Bridging
      description: >
        Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.
      sub_techniques:
        - id: "001"
          name: Network Address Translation Traversal
          description: >
            Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.
    - id: T1498
      name: Network Denial of Service
      description: >
        Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion.
      sub_techniques:
        - id: "001"
          name: Direct Network Flood
          description: >
            Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.
        - id: "002"
          name: Reflection Amplification
          description: >
            Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.
    - id: T1046
      name: Network Service Discovery
      description: >
        Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.
    - id: T1135
      name: Network Share Discovery
      description: >
        Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
    - id: T1040
      name: Network Sniffing
      description: >
        Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
    - id: T1095
      name: Non-Application Layer Protocol
      description: >
        Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).
    - id: T1571
      name: Non-Standard Port
      description: >
        Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.
    - id: T1027
      name: Obfuscated Files or Information
      description: >
        Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.
      sub_techniques:
        - id: "001"
          name: Binary Padding
          description: >
            Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.
        - id: "002"
          name: Software Packing
          description: >
            Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.
        - id: "003"
          name: Steganography
          description: >
            Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.
        - id: "004"
          name: Compile After Delivery
          description: >
            Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.
        - id: "005"
          name: Indicator Removal from Tools
          description: >
            Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.
        - id: "006"
          name: HTML Smuggling
          description: >
            Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.
    - id: T1588
      name: Obtain Capabilities
      description: >
        Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.
      sub_techniques:
        - id: "001"
          name: Malware
          description: >
            Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.
        - id: "002"
          name: Tool
          description: >
            Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.
        - id: "003"
          name: Code Signing Certificates
          description: >
            Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.
        - id: "004"
          name: Digital Certificates
          description: >
            Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.
        - id: "005"
          name: Exploits
          description: >
            Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.
        - id: "006"
          name: Vulnerabilities
          description: >
            Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.
    - id: T1137
      name: Office Application Startup
      description: >
        Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.
      sub_techniques:
        - id: "001"
          name: Office Template Macros
          description: >
            Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.
        - id: "002"
          name: Office Test
          description: >
            Adversaries may abuse the Microsoft Office "Office Test" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.
        - id: "003"
          name: Outlook Forms
          description: >
            Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.
        - id: "004"
          name: Outlook Home Page
          description: >
            Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.
        - id: "005"
          name: Outlook Rules
          description: >
            Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.
        - id: "006"
          name: Add-ins
          description: >
            Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins.
    - id: T1003
      name: OS Credential Dumping
      description: >
        Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.
      sub_techniques:
        - id: "001"
          name: LSASS Memory
          description: >
            Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.
        - id: "002"
          name: Security Account Manager
          description: >
            Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.
        - id: "003"
          name: NTDS
          description: >
            Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.
        - id: "004"
          name: LSA Secrets
          description: >
            Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\SECURITY\Policy\Secrets. LSA secrets can also be dumped from memory.
        - id: "005"
          name: Cached Domain Credentials
          description: >
            Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.
        - id: "006"
          name: DCSync
          description: >
            Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.
        - id: "007"
          name: Proc Filesystem
          description: >
            Adversaries may gather credentials from information stored in the Proc filesystem or /proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.
        - id: "008"
          name: /etc/passwd and /etc/shadow
          description: >
            Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.
    - id: T1201
      name: Password Policy Discovery
      description: >
        Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).
    - id: T1120
      name: Peripheral Device Discovery
      description: >
        Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.
    - id: T1069
      name: Permission Groups Discovery
      description: >
        Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.
      sub_techniques:
        - id: "001"
          name: Local Groups
          description: >
            Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
        - id: "002"
          name: Domain Groups
          description: >
            Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
        - id: "003"
          name: Cloud Groups
          description: >
            Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.
    - id: T1566
      name: Phishing
      description: >
        Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.
      sub_techniques:
        - id: "001"
          name: Spearphishing Attachment
          description: >
            Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.
        - id: "002"
          name: Spearphishing Link
          description: >
            Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.
        - id: "003"
          name: Spearphishing via Service
          description: >
            Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels.
    - id: T1598
      name: Phishing for Information
      description: >
        Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.
      sub_techniques:
        - id: "001"
          name: Spearphishing Service
          description: >
            Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
        - id: "002"
          name: Spearphishing Attachment
          description: >
            Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
        - id: "003"
          name: Spearphishing Link
          description: >
            Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.
    - id: T1647
      name: Plist File Modification
      description: >
        Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format.
    - id: T1542
      name: Pre-OS Boot
      description: >
        Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.
      sub_techniques:
        - id: "001"
          name: System Firmware
          description: >
            Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.
        - id: "002"
          name: Component Firmware
          description: >
            Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.
        - id: "003"
          name: Bootkit
          description: >
            Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.
        - id: "004"
          name: ROMMONkit
          description: >
            Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.
        - id: "005"
          name: TFTP Boot
          description: >
            Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.
    - id: T1057
      name: Process Discovery
      description: >
        Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
    - id: T1055
      name: Process Injection
      description: >
        Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.
      sub_techniques:
        - id: "001"
          name: Dynamic-link Library Injection
          description: >
            Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "002"
          name: Portable Executable Injection
          description: >
            Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "003"
          name: Thread Execution Hijacking
          description: >
            Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.
        - id: "004"
          name: Asynchronous Procedure Call
          description: >
            Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "005"
          name: Thread Local Storage
          description: >
            Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "008"
          name: Ptrace System Calls
          description: >
            Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "009"
          name: Proc Memory
          description: >
            Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "011"
          name: Extra Window Memory Injection
          description: >
            Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process.
        - id: "012"
          name: Process Hollowing
          description: >
            Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.
        - id: "013"
          name: Process Doppelgänging
          description: >
            Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process.
        - id: "014"
          name: VDSO Hijacking
          description: >
            Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process.
        - id: "015"
          name: ListPlanting
          description: >
            Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.
    - id: T1572
      name: Protocol Tunneling
      description: >
        Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet.
    - id: T1090
      name: Proxy
      description: >
        Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.
      sub_techniques:
        - id: "001"
          name: Internal Proxy
          description: >
            Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.
        - id: "002"
          name: External Proxy
          description: >
            Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.
        - id: "003"
          name: Multi-hop Proxy
          description: >
            To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.
        - id: "004"
          name: Domain Fronting
          description: >
            Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).
    - id: T1012
      name: Query Registry
      description: >
        Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.
    - id: T1620
      name: Reflective Code Loading
      description: >
        Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).
    - id: T1219
      name: Remote Access Software
      description: >
        An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.
    - id: T1563
      name: Remote Service Session Hijacking
      description: >
        Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.
      sub_techniques:
        - id: "001"
          name: SSH Hijacking
          description: >
            Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.
        - id: "002"
          name: RDP Hijacking
          description: >
            Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).
    - id: T1021
      name: Remote Services
      description: >
        Adversaries may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.
      sub_techniques:
        - id: "001"
          name: Remote Desktop Protocol
          description: >
            Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
        - id: "002"
          name: SMB/Windows Admin Shares
          description: >
            Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.
        - id: "003"
          name: Distributed Component Object Model
          description: >
            Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.
        - id: "004"
          name: SSH
          description: >
            Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.
        - id: "005"
          name: VNC
          description: >
            Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC). VNC is a platform-independent desktop sharing system that uses the RFB ("remote framebuffer") protocol to enable users to remotely control another computer’s display by relaying the screen, mouse, and keyboard inputs over the network.
        - id: "006"
          name: Windows Remote Management
          description: >
            Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.
    - id: T1018
      name: Remote System Discovery
      description: >
        Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as Ping or net view using Net.
    - id: T1091
      name: Replication Through Removable Media
      description: >
        Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.
    - id: T1496
      name: Resource Hijacking
      description: >
        Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability.
    - id: T1207
      name: Rogue Domain Controller
      description: >
        Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.
    - id: T1014
      name: Rootkit
      description: >
        Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.
    - id: T1053
      name: Scheduled Task/Job
      description: >
        Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.
      sub_techniques:
        - id: "002"
          name: At
          description: >
            Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.
        - id: "003"
          name: Cron
          description: >
            Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems. The crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.
        - id: "005"
          name: Scheduled Task
          description: >
            Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.
        - id: "006"
          name: Systemd Timers
          description: >
            Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH.
        - id: "007"
          name: Container Orchestration Job
          description: >
            Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.
    - id: T1029
      name: Scheduled Transfer
      description: >
        Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.
    - id: T1113
      name: Screen Capture
      description: >
        Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.
    - id: T1597
      name: Search Closed Sources
      description: >
        Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.
      sub_techniques:
        - id: "001"
          name: Threat Intel Vendors
          description: >
            Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.
        - id: "002"
          name: Purchase Technical Data
          description: >
            Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.
    - id: T1596
      name: Search Open Technical Databases
      description: >
        Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.
      sub_techniques:
        - id: "001"
          name: DNS/Passive DNS
          description: >
            Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.
        - id: "002"
          name: WHOIS
          description: >
            Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.
        - id: "003"
          name: Digital Certificates
          description: >
            Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.
        - id: "004"
          name: CDNs
          description: >
            Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region.
        - id: "005"
          name: Scan Databases
          description: >
            Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.
    - id: T1593
      name: Search Open Websites/Domains
      description: >
        Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.
      sub_techniques:
        - id: "001"
          name: Social Media
          description: >
            Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.
        - id: "002"
          name: Search Engines
          description: >
            Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).
    - id: T1594
      name: Search Victim-Owned Websites
      description: >
        Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.
    - id: T1505
      name: Server Software Component
      description: >
        Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.
      sub_techniques:
        - id: "001"
          name: SQL Stored Procedures
          description: >
            Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).
        - id: "002"
          name: Transport Agent
          description: >
            Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks.
        - id: "003"
          name: Web Shell
          description: >
            Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.
        - id: "004"
          name: IIS Components
          description: >
            Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.
        - id: "005"
          name: Terminal Services DLL
          description: >
            Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.
    - id: T1489
      name: Service Stop
      description: >
        Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.
    - id: T1129
      name: Shared Modules
      description: >
        Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API.
    - id: T1072
      name: Software Deployment Tools
      description: >
        Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).
    - id: T1518
      name: Software Discovery
      description: >
        Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
      sub_techniques:
        - id: "001"
          name: Security Software Discovery
          description: >
            Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
    - id: T1608
      name: Stage Capabilities
      description: >
        Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities can also be staged on web services, such as GitHub or Pastebin.
      sub_techniques:
        - id: "001"
          name: Upload Malware
          description: >
            Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.
        - id: "002"
          name: Upload Tool
          description: >
            Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.
        - id: "003"
          name: Install Digital Certificate
          description: >
            Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.
        - id: "004"
          name: Drive-by Target
          description: >
            Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).
        - id: "005"
          name: Link Target
          description: >
            Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link.
    - id: T1528
      name: Steal Application Access Token
      description: >
        Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.
    - id: T1558
      name: Steal or Forge Kerberos Tickets
      description: >
        Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as "realms", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting. Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.
      sub_techniques:
        - id: "001"
          name: Golden Ticket
          description: >
            Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory.
        - id: "002"
          name: Silver Ticket
          description: >
            Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.
        - id: "003"
          name: Kerberoasting
          description: >
            Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force.
        - id: "004"
          name: AS-REP Roasting
          description: >
            Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages.
    - id: T1539
      name: Steal Web Session Cookie
      description: >
        An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.
    - id: T1553
      name: Subvert Trust Controls
      description: >
        Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.
      sub_techniques:
        - id: "001"
          name: Gatekeeper Bypass
          description: >
            Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls in macOS. When documents, applications, or programs are downloaded an extended attribute (xattr) called com.apple.quarantine can be set on the file by the application performing the download. This attribute, also known as a quarantine flag, is read by Apple's Gatekeeper defense program when the file is run and provides a prompt to the user to allow or deny execution. Gatekeeper also monitors an application's usage of dynamic libraries (dylibs) loaded outside the application folder on any quarantined binary, often using the dlopen function. If the quarantine flag is set in macOS 10.15+, Gatekeeper also checks for a notarization ticket and sends a cryptographic hash to Apple's servers to check for validity for all unsigned executables.
        - id: "002"
          name: Code Signing
          description: >
            Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. The certificates used during an operation may be created, acquired, or stolen by the adversary. Unlike Invalid Code Signature, this activity will result in a valid signature.
        - id: "003"
          name: SIP and Trust Provider Hijacking
          description: >
            Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.
        - id: "004"
          name: Install Root Certificate
          description: >
            Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.
        - id: "005"
          name: Mark-of-the-Web Bypass
          description: >
            Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file in not known/trusted, SmartScreen will prevent the execution and warn the user not to run it.
        - id: "006"
          name: Code Signing Policy Modification
          description: >
            Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.
    - id: T1195
      name: Supply Chain Compromise
      description: >
        Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.
      sub_techniques:
        - id: "001"
          name: Compromise Software Dependencies and Development Tools
          description: >
            Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.
        - id: "002"
          name: Compromise Software Supply Chain
          description: >
            Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.
        - id: "003"
          name: Compromise Hardware Supply Chain
          description: >
            Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.
    - id: T1218
      name: System Binary Proxy Execution
      description: >
        Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.
      sub_techniques:
        - id: "001"
          name: Compiled HTML File
          description: >
            Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe).
        - id: "002"
          name: Control Panel
          description: >
            Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.
        - id: "003"
          name: CMSTP
          description: >
            Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.
        - id: "004"
          name: InstallUtil
          description: >
            Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe and C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe.
        - id: "005"
          name: Mshta
          description: >
            Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code
        - id: "007"
          name: Msiexec
          description: >
            Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.
        - id: "008"
          name: Odbcconf
          description: >
            Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.
        - id: "009"
          name: Regsvcs/Regasm
          description: >
            Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft.
        - id: "010"
          name: Regsvr32
          description: >
            Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft.
        - id: "011"
          name: Rundll32
          description: >
            Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).
        - id: "012"
          name: Verclsid
          description: >
            Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.
        - id: "013"
          name: Mavinject
          description: >
            Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).
        - id: "014"
          name: MMC
          description: >
            Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration.
    - id: T1082
      name: System Information Discovery
      description: >
        An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
    - id: T1614
      name: System Location Discovery
      description: >
        Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
      sub_techniques:
        - id: "001"
          name: System Language Discovery
          description: >
            Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.
    - id: T1016
      name: System Network Configuration Discovery
      description: >
        Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.
      sub_techniques:
        - id: "001"
          name: Internet Connection Discovery
          description: >
            Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.
    - id: T1049
      name: System Network Connections Discovery
      description: >
        Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.
    - id: T1033
      name: System Owner/User Discovery
      description: >
        Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
    - id: T1216
      name: System Script Proxy Execution
      description: >
        Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.
      sub_techniques:
        - id: "001"
          name: PubPrn
          description: >
            Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.
    - id: T1007
      name: System Service Discovery
      description: >
        Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.
    - id: T1569
      name: System Services
      description: >
        Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.
      sub_techniques:
        - id: "001"
          name: Launchctl
          description: >
            Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.
        - id: "002"
          name: Service Execution
          description: >
            Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.
    - id: T1529
      name: System Shutdown/Reboot
      description: >
        Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device. Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.
    - id: T1124
      name: System Time Discovery
      description: >
        An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.
    - id: T1080
      name: Taint Shared Content
      description: >
        Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.
    - id: T1221
      name: Template Injection
      description: >
        Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.
    - id: T1205
      name: Traffic Signaling
      description: >
        Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.
      sub_techniques:
        - id: "001"
          name: Port Knocking
          description: >
            Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.
    - id: T1537
      name: Transfer Data to Cloud Account
      description: >
        Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.
    - id: T1127
      name: Trusted Developer Utilities Proxy Execution
      description: >
        Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.
      sub_techniques:
        - id: "001"
          name: MSBuild
          description: >
            Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.
    - id: T1199
      name: Trusted Relationship
      description: >
        Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.
    - id: T1552
      name: Unsecured Credentials
      description: >
        Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).
      sub_techniques:
        - id: "001"
          name: Credentials In Files
          description: >
            Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.
        - id: "002"
          name: Credentials in Registry
          description: >
            Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.
        - id: "003"
          name: Bash History
          description: >
            Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the "history" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.
        - id: "004"
          name: Private Keys
          description: >
            Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc.
        - id: "005"
          name: Cloud Instance Metadata API
          description: >
            Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.
        - id: "006"
          name: Group Policy Preferences
          description: >
            Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.
        - id: "007"
          name: Container API
          description: >
            Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.
    - id: T1535
      name: Unused/Unsupported Cloud Regions
      description: >
        Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.
    - id: T1550
      name: Use Alternate Authentication Material
      description: >
        Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.
      sub_techniques:
        - id: "001"
          name: Application Access Token
          description: >
            Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.
        - id: "002"
          name: Pass the Hash
          description: >
            Adversaries may "pass the hash" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.
        - id: "003"
          name: Pass the Ticket
          description: >
            Adversaries may "pass the ticket" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.
        - id: "004"
          name: Web Session Cookie
          description: >
            Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.
    - id: T1204
      name: User Execution
      description: >
        An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.
      sub_techniques:
        - id: "001"
          name: Malicious Link
          description: >
            An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.
        - id: "002"
          name: Malicious File
          description: >
            An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.
        - id: "003"
          name: Malicious Image
          description: >
            Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.
    - id: T1078
      name: Valid Accounts
      description: >
        Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.
      sub_techniques:
        - id: "001"
          name: Default Accounts
          description: >
            Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.
        - id: "002"
          name: Domain Accounts
          description: >
            Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.
        - id: "003"
          name: Local Accounts
          description: >
            Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.
        - id: "004"
          name: Cloud Accounts
          description: >
            Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.
    - id: T1125
      name: Video Capture
      description: >
        An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.
    - id: T1497
      name: Virtualization/Sandbox Evasion
      description: >
        Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
      sub_techniques:
        - id: "001"
          name: System Checks
          description: >
            Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
        - id: "002"
          name: User Activity Based Checks
          description: >
            Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.
        - id: "003"
          name: Time Based Evasion
          description: >
            Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.
    - id: T1600
      name: Weaken Encryption
      description: >
        Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications.
      sub_techniques:
        - id: "001"
          name: Reduce Key Space
          description: >
            Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.
        - id: "002"
          name: Disable Crypto Hardware
          description: >
            Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.
    - id: T1102
      name: Web Service
      description: >
        Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.
      sub_techniques:
        - id: "001"
          name: Dead Drop Resolver
          description: >
            Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.
        - id: "002"
          name: Bidirectional Communication
          description: >
            Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet.
        - id: "003"
          name: One-Way Communication
          description: >
            Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.
    - id: T1047
      name: Windows Management Instrumentation
      description: >
        Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.
    - id: T1220
      name: XSL Script Processing
      description: >
        Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.
